/* automatically generated by rust-bindgen */

pub const SPV_VERSION: u32 = 66304;
pub const SPV_REVISION: u32 = 6;
pub type SpvId = ::std::os::raw::c_uint;
pub const SpvSourceLanguage__SpvSourceLanguageUnknown: SpvSourceLanguage_ = 0;
pub const SpvSourceLanguage__SpvSourceLanguageESSL: SpvSourceLanguage_ = 1;
pub const SpvSourceLanguage__SpvSourceLanguageGLSL: SpvSourceLanguage_ = 2;
pub const SpvSourceLanguage__SpvSourceLanguageOpenCL_C: SpvSourceLanguage_ = 3;
pub const SpvSourceLanguage__SpvSourceLanguageOpenCL_CPP: SpvSourceLanguage_ = 4;
pub const SpvSourceLanguage__SpvSourceLanguageHLSL: SpvSourceLanguage_ = 5;
pub const SpvSourceLanguage__SpvSourceLanguageMax: SpvSourceLanguage_ = 2147483647;
pub type SpvSourceLanguage_ = i32;
pub use self::SpvSourceLanguage_ as SpvSourceLanguage;
pub const SpvExecutionModel__SpvExecutionModelVertex: SpvExecutionModel_ = 0;
pub const SpvExecutionModel__SpvExecutionModelTessellationControl: SpvExecutionModel_ = 1;
pub const SpvExecutionModel__SpvExecutionModelTessellationEvaluation: SpvExecutionModel_ = 2;
pub const SpvExecutionModel__SpvExecutionModelGeometry: SpvExecutionModel_ = 3;
pub const SpvExecutionModel__SpvExecutionModelFragment: SpvExecutionModel_ = 4;
pub const SpvExecutionModel__SpvExecutionModelGLCompute: SpvExecutionModel_ = 5;
pub const SpvExecutionModel__SpvExecutionModelKernel: SpvExecutionModel_ = 6;
pub const SpvExecutionModel__SpvExecutionModelTaskNV: SpvExecutionModel_ = 5267;
pub const SpvExecutionModel__SpvExecutionModelMeshNV: SpvExecutionModel_ = 5268;
pub const SpvExecutionModel__SpvExecutionModelRayGenerationNV: SpvExecutionModel_ = 5313;
pub const SpvExecutionModel__SpvExecutionModelIntersectionNV: SpvExecutionModel_ = 5314;
pub const SpvExecutionModel__SpvExecutionModelAnyHitNV: SpvExecutionModel_ = 5315;
pub const SpvExecutionModel__SpvExecutionModelClosestHitNV: SpvExecutionModel_ = 5316;
pub const SpvExecutionModel__SpvExecutionModelMissNV: SpvExecutionModel_ = 5317;
pub const SpvExecutionModel__SpvExecutionModelCallableNV: SpvExecutionModel_ = 5318;
pub const SpvExecutionModel__SpvExecutionModelMax: SpvExecutionModel_ = 2147483647;
pub type SpvExecutionModel_ = i32;
pub use self::SpvExecutionModel_ as SpvExecutionModel;
pub const SpvAddressingModel__SpvAddressingModelLogical: SpvAddressingModel_ = 0;
pub const SpvAddressingModel__SpvAddressingModelPhysical32: SpvAddressingModel_ = 1;
pub const SpvAddressingModel__SpvAddressingModelPhysical64: SpvAddressingModel_ = 2;
pub const SpvAddressingModel__SpvAddressingModelMax: SpvAddressingModel_ = 2147483647;
pub type SpvAddressingModel_ = i32;
pub use self::SpvAddressingModel_ as SpvAddressingModel;
pub const SpvMemoryModel__SpvMemoryModelSimple: SpvMemoryModel_ = 0;
pub const SpvMemoryModel__SpvMemoryModelGLSL450: SpvMemoryModel_ = 1;
pub const SpvMemoryModel__SpvMemoryModelOpenCL: SpvMemoryModel_ = 2;
pub const SpvMemoryModel__SpvMemoryModelVulkanKHR: SpvMemoryModel_ = 3;
pub const SpvMemoryModel__SpvMemoryModelMax: SpvMemoryModel_ = 2147483647;
pub type SpvMemoryModel_ = i32;
pub use self::SpvMemoryModel_ as SpvMemoryModel;
pub const SpvExecutionMode__SpvExecutionModeInvocations: SpvExecutionMode_ = 0;
pub const SpvExecutionMode__SpvExecutionModeSpacingEqual: SpvExecutionMode_ = 1;
pub const SpvExecutionMode__SpvExecutionModeSpacingFractionalEven: SpvExecutionMode_ = 2;
pub const SpvExecutionMode__SpvExecutionModeSpacingFractionalOdd: SpvExecutionMode_ = 3;
pub const SpvExecutionMode__SpvExecutionModeVertexOrderCw: SpvExecutionMode_ = 4;
pub const SpvExecutionMode__SpvExecutionModeVertexOrderCcw: SpvExecutionMode_ = 5;
pub const SpvExecutionMode__SpvExecutionModePixelCenterInteger: SpvExecutionMode_ = 6;
pub const SpvExecutionMode__SpvExecutionModeOriginUpperLeft: SpvExecutionMode_ = 7;
pub const SpvExecutionMode__SpvExecutionModeOriginLowerLeft: SpvExecutionMode_ = 8;
pub const SpvExecutionMode__SpvExecutionModeEarlyFragmentTests: SpvExecutionMode_ = 9;
pub const SpvExecutionMode__SpvExecutionModePointMode: SpvExecutionMode_ = 10;
pub const SpvExecutionMode__SpvExecutionModeXfb: SpvExecutionMode_ = 11;
pub const SpvExecutionMode__SpvExecutionModeDepthReplacing: SpvExecutionMode_ = 12;
pub const SpvExecutionMode__SpvExecutionModeDepthGreater: SpvExecutionMode_ = 14;
pub const SpvExecutionMode__SpvExecutionModeDepthLess: SpvExecutionMode_ = 15;
pub const SpvExecutionMode__SpvExecutionModeDepthUnchanged: SpvExecutionMode_ = 16;
pub const SpvExecutionMode__SpvExecutionModeLocalSize: SpvExecutionMode_ = 17;
pub const SpvExecutionMode__SpvExecutionModeLocalSizeHint: SpvExecutionMode_ = 18;
pub const SpvExecutionMode__SpvExecutionModeInputPoints: SpvExecutionMode_ = 19;
pub const SpvExecutionMode__SpvExecutionModeInputLines: SpvExecutionMode_ = 20;
pub const SpvExecutionMode__SpvExecutionModeInputLinesAdjacency: SpvExecutionMode_ = 21;
pub const SpvExecutionMode__SpvExecutionModeTriangles: SpvExecutionMode_ = 22;
pub const SpvExecutionMode__SpvExecutionModeInputTrianglesAdjacency: SpvExecutionMode_ = 23;
pub const SpvExecutionMode__SpvExecutionModeQuads: SpvExecutionMode_ = 24;
pub const SpvExecutionMode__SpvExecutionModeIsolines: SpvExecutionMode_ = 25;
pub const SpvExecutionMode__SpvExecutionModeOutputVertices: SpvExecutionMode_ = 26;
pub const SpvExecutionMode__SpvExecutionModeOutputPoints: SpvExecutionMode_ = 27;
pub const SpvExecutionMode__SpvExecutionModeOutputLineStrip: SpvExecutionMode_ = 28;
pub const SpvExecutionMode__SpvExecutionModeOutputTriangleStrip: SpvExecutionMode_ = 29;
pub const SpvExecutionMode__SpvExecutionModeVecTypeHint: SpvExecutionMode_ = 30;
pub const SpvExecutionMode__SpvExecutionModeContractionOff: SpvExecutionMode_ = 31;
pub const SpvExecutionMode__SpvExecutionModeInitializer: SpvExecutionMode_ = 33;
pub const SpvExecutionMode__SpvExecutionModeFinalizer: SpvExecutionMode_ = 34;
pub const SpvExecutionMode__SpvExecutionModeSubgroupSize: SpvExecutionMode_ = 35;
pub const SpvExecutionMode__SpvExecutionModeSubgroupsPerWorkgroup: SpvExecutionMode_ = 36;
pub const SpvExecutionMode__SpvExecutionModeSubgroupsPerWorkgroupId: SpvExecutionMode_ = 37;
pub const SpvExecutionMode__SpvExecutionModeLocalSizeId: SpvExecutionMode_ = 38;
pub const SpvExecutionMode__SpvExecutionModeLocalSizeHintId: SpvExecutionMode_ = 39;
pub const SpvExecutionMode__SpvExecutionModePostDepthCoverage: SpvExecutionMode_ = 4446;
pub const SpvExecutionMode__SpvExecutionModeDenormPreserve: SpvExecutionMode_ = 4459;
pub const SpvExecutionMode__SpvExecutionModeDenormFlushToZero: SpvExecutionMode_ = 4460;
pub const SpvExecutionMode__SpvExecutionModeSignedZeroInfNanPreserve: SpvExecutionMode_ = 4461;
pub const SpvExecutionMode__SpvExecutionModeRoundingModeRTE: SpvExecutionMode_ = 4462;
pub const SpvExecutionMode__SpvExecutionModeRoundingModeRTZ: SpvExecutionMode_ = 4463;
pub const SpvExecutionMode__SpvExecutionModeStencilRefReplacingEXT: SpvExecutionMode_ = 5027;
pub const SpvExecutionMode__SpvExecutionModeOutputLinesNV: SpvExecutionMode_ = 5269;
pub const SpvExecutionMode__SpvExecutionModeOutputPrimitivesNV: SpvExecutionMode_ = 5270;
pub const SpvExecutionMode__SpvExecutionModeDerivativeGroupQuadsNV: SpvExecutionMode_ = 5289;
pub const SpvExecutionMode__SpvExecutionModeDerivativeGroupLinearNV: SpvExecutionMode_ = 5290;
pub const SpvExecutionMode__SpvExecutionModeOutputTrianglesNV: SpvExecutionMode_ = 5298;
pub const SpvExecutionMode__SpvExecutionModeMax: SpvExecutionMode_ = 2147483647;
pub type SpvExecutionMode_ = i32;
pub use self::SpvExecutionMode_ as SpvExecutionMode;
pub const SpvStorageClass__SpvStorageClassUniformConstant: SpvStorageClass_ = 0;
pub const SpvStorageClass__SpvStorageClassInput: SpvStorageClass_ = 1;
pub const SpvStorageClass__SpvStorageClassUniform: SpvStorageClass_ = 2;
pub const SpvStorageClass__SpvStorageClassOutput: SpvStorageClass_ = 3;
pub const SpvStorageClass__SpvStorageClassWorkgroup: SpvStorageClass_ = 4;
pub const SpvStorageClass__SpvStorageClassCrossWorkgroup: SpvStorageClass_ = 5;
pub const SpvStorageClass__SpvStorageClassPrivate: SpvStorageClass_ = 6;
pub const SpvStorageClass__SpvStorageClassFunction: SpvStorageClass_ = 7;
pub const SpvStorageClass__SpvStorageClassGeneric: SpvStorageClass_ = 8;
pub const SpvStorageClass__SpvStorageClassPushConstant: SpvStorageClass_ = 9;
pub const SpvStorageClass__SpvStorageClassAtomicCounter: SpvStorageClass_ = 10;
pub const SpvStorageClass__SpvStorageClassImage: SpvStorageClass_ = 11;
pub const SpvStorageClass__SpvStorageClassStorageBuffer: SpvStorageClass_ = 12;
pub const SpvStorageClass__SpvStorageClassCallableDataNV: SpvStorageClass_ = 5328;
pub const SpvStorageClass__SpvStorageClassIncomingCallableDataNV: SpvStorageClass_ = 5329;
pub const SpvStorageClass__SpvStorageClassRayPayloadNV: SpvStorageClass_ = 5338;
pub const SpvStorageClass__SpvStorageClassHitAttributeNV: SpvStorageClass_ = 5339;
pub const SpvStorageClass__SpvStorageClassIncomingRayPayloadNV: SpvStorageClass_ = 5342;
pub const SpvStorageClass__SpvStorageClassShaderRecordBufferNV: SpvStorageClass_ = 5343;
pub const SpvStorageClass__SpvStorageClassMax: SpvStorageClass_ = 2147483647;
pub type SpvStorageClass_ = i32;
pub use self::SpvStorageClass_ as SpvStorageClass;
pub const SpvDim__SpvDim1D: SpvDim_ = 0;
pub const SpvDim__SpvDim2D: SpvDim_ = 1;
pub const SpvDim__SpvDim3D: SpvDim_ = 2;
pub const SpvDim__SpvDimCube: SpvDim_ = 3;
pub const SpvDim__SpvDimRect: SpvDim_ = 4;
pub const SpvDim__SpvDimBuffer: SpvDim_ = 5;
pub const SpvDim__SpvDimSubpassData: SpvDim_ = 6;
pub const SpvDim__SpvDimMax: SpvDim_ = 2147483647;
pub type SpvDim_ = i32;
pub use self::SpvDim_ as SpvDim;
pub const SpvSamplerAddressingMode__SpvSamplerAddressingModeNone: SpvSamplerAddressingMode_ = 0;
pub const SpvSamplerAddressingMode__SpvSamplerAddressingModeClampToEdge: SpvSamplerAddressingMode_ =
    1;
pub const SpvSamplerAddressingMode__SpvSamplerAddressingModeClamp: SpvSamplerAddressingMode_ = 2;
pub const SpvSamplerAddressingMode__SpvSamplerAddressingModeRepeat: SpvSamplerAddressingMode_ = 3;
pub const SpvSamplerAddressingMode__SpvSamplerAddressingModeRepeatMirrored:
    SpvSamplerAddressingMode_ = 4;
pub const SpvSamplerAddressingMode__SpvSamplerAddressingModeMax: SpvSamplerAddressingMode_ =
    2147483647;
pub type SpvSamplerAddressingMode_ = i32;
pub use self::SpvSamplerAddressingMode_ as SpvSamplerAddressingMode;
pub const SpvSamplerFilterMode__SpvSamplerFilterModeNearest: SpvSamplerFilterMode_ = 0;
pub const SpvSamplerFilterMode__SpvSamplerFilterModeLinear: SpvSamplerFilterMode_ = 1;
pub const SpvSamplerFilterMode__SpvSamplerFilterModeMax: SpvSamplerFilterMode_ = 2147483647;
pub type SpvSamplerFilterMode_ = i32;
pub use self::SpvSamplerFilterMode_ as SpvSamplerFilterMode;
pub const SpvImageFormat__SpvImageFormatUnknown: SpvImageFormat_ = 0;
pub const SpvImageFormat__SpvImageFormatRgba32f: SpvImageFormat_ = 1;
pub const SpvImageFormat__SpvImageFormatRgba16f: SpvImageFormat_ = 2;
pub const SpvImageFormat__SpvImageFormatR32f: SpvImageFormat_ = 3;
pub const SpvImageFormat__SpvImageFormatRgba8: SpvImageFormat_ = 4;
pub const SpvImageFormat__SpvImageFormatRgba8Snorm: SpvImageFormat_ = 5;
pub const SpvImageFormat__SpvImageFormatRg32f: SpvImageFormat_ = 6;
pub const SpvImageFormat__SpvImageFormatRg16f: SpvImageFormat_ = 7;
pub const SpvImageFormat__SpvImageFormatR11fG11fB10f: SpvImageFormat_ = 8;
pub const SpvImageFormat__SpvImageFormatR16f: SpvImageFormat_ = 9;
pub const SpvImageFormat__SpvImageFormatRgba16: SpvImageFormat_ = 10;
pub const SpvImageFormat__SpvImageFormatRgb10A2: SpvImageFormat_ = 11;
pub const SpvImageFormat__SpvImageFormatRg16: SpvImageFormat_ = 12;
pub const SpvImageFormat__SpvImageFormatRg8: SpvImageFormat_ = 13;
pub const SpvImageFormat__SpvImageFormatR16: SpvImageFormat_ = 14;
pub const SpvImageFormat__SpvImageFormatR8: SpvImageFormat_ = 15;
pub const SpvImageFormat__SpvImageFormatRgba16Snorm: SpvImageFormat_ = 16;
pub const SpvImageFormat__SpvImageFormatRg16Snorm: SpvImageFormat_ = 17;
pub const SpvImageFormat__SpvImageFormatRg8Snorm: SpvImageFormat_ = 18;
pub const SpvImageFormat__SpvImageFormatR16Snorm: SpvImageFormat_ = 19;
pub const SpvImageFormat__SpvImageFormatR8Snorm: SpvImageFormat_ = 20;
pub const SpvImageFormat__SpvImageFormatRgba32i: SpvImageFormat_ = 21;
pub const SpvImageFormat__SpvImageFormatRgba16i: SpvImageFormat_ = 22;
pub const SpvImageFormat__SpvImageFormatRgba8i: SpvImageFormat_ = 23;
pub const SpvImageFormat__SpvImageFormatR32i: SpvImageFormat_ = 24;
pub const SpvImageFormat__SpvImageFormatRg32i: SpvImageFormat_ = 25;
pub const SpvImageFormat__SpvImageFormatRg16i: SpvImageFormat_ = 26;
pub const SpvImageFormat__SpvImageFormatRg8i: SpvImageFormat_ = 27;
pub const SpvImageFormat__SpvImageFormatR16i: SpvImageFormat_ = 28;
pub const SpvImageFormat__SpvImageFormatR8i: SpvImageFormat_ = 29;
pub const SpvImageFormat__SpvImageFormatRgba32ui: SpvImageFormat_ = 30;
pub const SpvImageFormat__SpvImageFormatRgba16ui: SpvImageFormat_ = 31;
pub const SpvImageFormat__SpvImageFormatRgba8ui: SpvImageFormat_ = 32;
pub const SpvImageFormat__SpvImageFormatR32ui: SpvImageFormat_ = 33;
pub const SpvImageFormat__SpvImageFormatRgb10a2ui: SpvImageFormat_ = 34;
pub const SpvImageFormat__SpvImageFormatRg32ui: SpvImageFormat_ = 35;
pub const SpvImageFormat__SpvImageFormatRg16ui: SpvImageFormat_ = 36;
pub const SpvImageFormat__SpvImageFormatRg8ui: SpvImageFormat_ = 37;
pub const SpvImageFormat__SpvImageFormatR16ui: SpvImageFormat_ = 38;
pub const SpvImageFormat__SpvImageFormatR8ui: SpvImageFormat_ = 39;
pub const SpvImageFormat__SpvImageFormatMax: SpvImageFormat_ = 2147483647;
pub type SpvImageFormat_ = i32;
pub use self::SpvImageFormat_ as SpvImageFormat;
pub const SpvImageChannelOrder__SpvImageChannelOrderR: SpvImageChannelOrder_ = 0;
pub const SpvImageChannelOrder__SpvImageChannelOrderA: SpvImageChannelOrder_ = 1;
pub const SpvImageChannelOrder__SpvImageChannelOrderRG: SpvImageChannelOrder_ = 2;
pub const SpvImageChannelOrder__SpvImageChannelOrderRA: SpvImageChannelOrder_ = 3;
pub const SpvImageChannelOrder__SpvImageChannelOrderRGB: SpvImageChannelOrder_ = 4;
pub const SpvImageChannelOrder__SpvImageChannelOrderRGBA: SpvImageChannelOrder_ = 5;
pub const SpvImageChannelOrder__SpvImageChannelOrderBGRA: SpvImageChannelOrder_ = 6;
pub const SpvImageChannelOrder__SpvImageChannelOrderARGB: SpvImageChannelOrder_ = 7;
pub const SpvImageChannelOrder__SpvImageChannelOrderIntensity: SpvImageChannelOrder_ = 8;
pub const SpvImageChannelOrder__SpvImageChannelOrderLuminance: SpvImageChannelOrder_ = 9;
pub const SpvImageChannelOrder__SpvImageChannelOrderRx: SpvImageChannelOrder_ = 10;
pub const SpvImageChannelOrder__SpvImageChannelOrderRGx: SpvImageChannelOrder_ = 11;
pub const SpvImageChannelOrder__SpvImageChannelOrderRGBx: SpvImageChannelOrder_ = 12;
pub const SpvImageChannelOrder__SpvImageChannelOrderDepth: SpvImageChannelOrder_ = 13;
pub const SpvImageChannelOrder__SpvImageChannelOrderDepthStencil: SpvImageChannelOrder_ = 14;
pub const SpvImageChannelOrder__SpvImageChannelOrdersRGB: SpvImageChannelOrder_ = 15;
pub const SpvImageChannelOrder__SpvImageChannelOrdersRGBx: SpvImageChannelOrder_ = 16;
pub const SpvImageChannelOrder__SpvImageChannelOrdersRGBA: SpvImageChannelOrder_ = 17;
pub const SpvImageChannelOrder__SpvImageChannelOrdersBGRA: SpvImageChannelOrder_ = 18;
pub const SpvImageChannelOrder__SpvImageChannelOrderABGR: SpvImageChannelOrder_ = 19;
pub const SpvImageChannelOrder__SpvImageChannelOrderMax: SpvImageChannelOrder_ = 2147483647;
pub type SpvImageChannelOrder_ = i32;
pub use self::SpvImageChannelOrder_ as SpvImageChannelOrder;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeSnormInt8: SpvImageChannelDataType_ = 0;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeSnormInt16: SpvImageChannelDataType_ = 1;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnormInt8: SpvImageChannelDataType_ = 2;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnormInt16: SpvImageChannelDataType_ = 3;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnormShort565: SpvImageChannelDataType_ =
    4;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnormShort555: SpvImageChannelDataType_ =
    5;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnormInt101010: SpvImageChannelDataType_ =
    6;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeSignedInt8: SpvImageChannelDataType_ = 7;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeSignedInt16: SpvImageChannelDataType_ = 8;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeSignedInt32: SpvImageChannelDataType_ = 9;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnsignedInt8: SpvImageChannelDataType_ =
    10;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnsignedInt16: SpvImageChannelDataType_ =
    11;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnsignedInt32: SpvImageChannelDataType_ =
    12;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeHalfFloat: SpvImageChannelDataType_ = 13;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeFloat: SpvImageChannelDataType_ = 14;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnormInt24: SpvImageChannelDataType_ = 15;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeUnormInt101010_2:
    SpvImageChannelDataType_ = 16;
pub const SpvImageChannelDataType__SpvImageChannelDataTypeMax: SpvImageChannelDataType_ =
    2147483647;
pub type SpvImageChannelDataType_ = i32;
pub use self::SpvImageChannelDataType_ as SpvImageChannelDataType;
pub const SpvImageOperandsShift__SpvImageOperandsBiasShift: SpvImageOperandsShift_ = 0;
pub const SpvImageOperandsShift__SpvImageOperandsLodShift: SpvImageOperandsShift_ = 1;
pub const SpvImageOperandsShift__SpvImageOperandsGradShift: SpvImageOperandsShift_ = 2;
pub const SpvImageOperandsShift__SpvImageOperandsConstOffsetShift: SpvImageOperandsShift_ = 3;
pub const SpvImageOperandsShift__SpvImageOperandsOffsetShift: SpvImageOperandsShift_ = 4;
pub const SpvImageOperandsShift__SpvImageOperandsConstOffsetsShift: SpvImageOperandsShift_ = 5;
pub const SpvImageOperandsShift__SpvImageOperandsSampleShift: SpvImageOperandsShift_ = 6;
pub const SpvImageOperandsShift__SpvImageOperandsMinLodShift: SpvImageOperandsShift_ = 7;
pub const SpvImageOperandsShift__SpvImageOperandsMakeTexelAvailableKHRShift:
    SpvImageOperandsShift_ = 8;
pub const SpvImageOperandsShift__SpvImageOperandsMakeTexelVisibleKHRShift: SpvImageOperandsShift_ =
    9;
pub const SpvImageOperandsShift__SpvImageOperandsNonPrivateTexelKHRShift: SpvImageOperandsShift_ =
    10;
pub const SpvImageOperandsShift__SpvImageOperandsVolatileTexelKHRShift: SpvImageOperandsShift_ = 11;
pub const SpvImageOperandsShift__SpvImageOperandsMax: SpvImageOperandsShift_ = 2147483647;
pub type SpvImageOperandsShift_ = i32;
pub use self::SpvImageOperandsShift_ as SpvImageOperandsShift;
pub const SpvImageOperandsMask__SpvImageOperandsMaskNone: SpvImageOperandsMask_ = 0;
pub const SpvImageOperandsMask__SpvImageOperandsBiasMask: SpvImageOperandsMask_ = 1;
pub const SpvImageOperandsMask__SpvImageOperandsLodMask: SpvImageOperandsMask_ = 2;
pub const SpvImageOperandsMask__SpvImageOperandsGradMask: SpvImageOperandsMask_ = 4;
pub const SpvImageOperandsMask__SpvImageOperandsConstOffsetMask: SpvImageOperandsMask_ = 8;
pub const SpvImageOperandsMask__SpvImageOperandsOffsetMask: SpvImageOperandsMask_ = 16;
pub const SpvImageOperandsMask__SpvImageOperandsConstOffsetsMask: SpvImageOperandsMask_ = 32;
pub const SpvImageOperandsMask__SpvImageOperandsSampleMask: SpvImageOperandsMask_ = 64;
pub const SpvImageOperandsMask__SpvImageOperandsMinLodMask: SpvImageOperandsMask_ = 128;
pub const SpvImageOperandsMask__SpvImageOperandsMakeTexelAvailableKHRMask: SpvImageOperandsMask_ =
    256;
pub const SpvImageOperandsMask__SpvImageOperandsMakeTexelVisibleKHRMask: SpvImageOperandsMask_ =
    512;
pub const SpvImageOperandsMask__SpvImageOperandsNonPrivateTexelKHRMask: SpvImageOperandsMask_ =
    1024;
pub const SpvImageOperandsMask__SpvImageOperandsVolatileTexelKHRMask: SpvImageOperandsMask_ = 2048;
pub type SpvImageOperandsMask_ = i32;
pub use self::SpvImageOperandsMask_ as SpvImageOperandsMask;
pub const SpvFPFastMathModeShift__SpvFPFastMathModeNotNaNShift: SpvFPFastMathModeShift_ = 0;
pub const SpvFPFastMathModeShift__SpvFPFastMathModeNotInfShift: SpvFPFastMathModeShift_ = 1;
pub const SpvFPFastMathModeShift__SpvFPFastMathModeNSZShift: SpvFPFastMathModeShift_ = 2;
pub const SpvFPFastMathModeShift__SpvFPFastMathModeAllowRecipShift: SpvFPFastMathModeShift_ = 3;
pub const SpvFPFastMathModeShift__SpvFPFastMathModeFastShift: SpvFPFastMathModeShift_ = 4;
pub const SpvFPFastMathModeShift__SpvFPFastMathModeMax: SpvFPFastMathModeShift_ = 2147483647;
pub type SpvFPFastMathModeShift_ = i32;
pub use self::SpvFPFastMathModeShift_ as SpvFPFastMathModeShift;
pub const SpvFPFastMathModeMask__SpvFPFastMathModeMaskNone: SpvFPFastMathModeMask_ = 0;
pub const SpvFPFastMathModeMask__SpvFPFastMathModeNotNaNMask: SpvFPFastMathModeMask_ = 1;
pub const SpvFPFastMathModeMask__SpvFPFastMathModeNotInfMask: SpvFPFastMathModeMask_ = 2;
pub const SpvFPFastMathModeMask__SpvFPFastMathModeNSZMask: SpvFPFastMathModeMask_ = 4;
pub const SpvFPFastMathModeMask__SpvFPFastMathModeAllowRecipMask: SpvFPFastMathModeMask_ = 8;
pub const SpvFPFastMathModeMask__SpvFPFastMathModeFastMask: SpvFPFastMathModeMask_ = 16;
pub type SpvFPFastMathModeMask_ = i32;
pub use self::SpvFPFastMathModeMask_ as SpvFPFastMathModeMask;
pub const SpvFPRoundingMode__SpvFPRoundingModeRTE: SpvFPRoundingMode_ = 0;
pub const SpvFPRoundingMode__SpvFPRoundingModeRTZ: SpvFPRoundingMode_ = 1;
pub const SpvFPRoundingMode__SpvFPRoundingModeRTP: SpvFPRoundingMode_ = 2;
pub const SpvFPRoundingMode__SpvFPRoundingModeRTN: SpvFPRoundingMode_ = 3;
pub const SpvFPRoundingMode__SpvFPRoundingModeMax: SpvFPRoundingMode_ = 2147483647;
pub type SpvFPRoundingMode_ = i32;
pub use self::SpvFPRoundingMode_ as SpvFPRoundingMode;
pub const SpvLinkageType__SpvLinkageTypeExport: SpvLinkageType_ = 0;
pub const SpvLinkageType__SpvLinkageTypeImport: SpvLinkageType_ = 1;
pub const SpvLinkageType__SpvLinkageTypeMax: SpvLinkageType_ = 2147483647;
pub type SpvLinkageType_ = i32;
pub use self::SpvLinkageType_ as SpvLinkageType;
pub const SpvAccessQualifier__SpvAccessQualifierReadOnly: SpvAccessQualifier_ = 0;
pub const SpvAccessQualifier__SpvAccessQualifierWriteOnly: SpvAccessQualifier_ = 1;
pub const SpvAccessQualifier__SpvAccessQualifierReadWrite: SpvAccessQualifier_ = 2;
pub const SpvAccessQualifier__SpvAccessQualifierMax: SpvAccessQualifier_ = 2147483647;
pub type SpvAccessQualifier_ = i32;
pub use self::SpvAccessQualifier_ as SpvAccessQualifier;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeZext:
    SpvFunctionParameterAttribute_ = 0;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeSext:
    SpvFunctionParameterAttribute_ = 1;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeByVal:
    SpvFunctionParameterAttribute_ = 2;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeSret:
    SpvFunctionParameterAttribute_ = 3;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeNoAlias:
    SpvFunctionParameterAttribute_ = 4;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeNoCapture:
    SpvFunctionParameterAttribute_ = 5;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeNoWrite:
    SpvFunctionParameterAttribute_ = 6;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeNoReadWrite:
    SpvFunctionParameterAttribute_ = 7;
pub const SpvFunctionParameterAttribute__SpvFunctionParameterAttributeMax:
    SpvFunctionParameterAttribute_ = 2147483647;
pub type SpvFunctionParameterAttribute_ = i32;
pub use self::SpvFunctionParameterAttribute_ as SpvFunctionParameterAttribute;
pub const SpvDecoration__SpvDecorationRelaxedPrecision: SpvDecoration_ = 0;
pub const SpvDecoration__SpvDecorationSpecId: SpvDecoration_ = 1;
pub const SpvDecoration__SpvDecorationBlock: SpvDecoration_ = 2;
pub const SpvDecoration__SpvDecorationBufferBlock: SpvDecoration_ = 3;
pub const SpvDecoration__SpvDecorationRowMajor: SpvDecoration_ = 4;
pub const SpvDecoration__SpvDecorationColMajor: SpvDecoration_ = 5;
pub const SpvDecoration__SpvDecorationArrayStride: SpvDecoration_ = 6;
pub const SpvDecoration__SpvDecorationMatrixStride: SpvDecoration_ = 7;
pub const SpvDecoration__SpvDecorationGLSLShared: SpvDecoration_ = 8;
pub const SpvDecoration__SpvDecorationGLSLPacked: SpvDecoration_ = 9;
pub const SpvDecoration__SpvDecorationCPacked: SpvDecoration_ = 10;
pub const SpvDecoration__SpvDecorationBuiltIn: SpvDecoration_ = 11;
pub const SpvDecoration__SpvDecorationNoPerspective: SpvDecoration_ = 13;
pub const SpvDecoration__SpvDecorationFlat: SpvDecoration_ = 14;
pub const SpvDecoration__SpvDecorationPatch: SpvDecoration_ = 15;
pub const SpvDecoration__SpvDecorationCentroid: SpvDecoration_ = 16;
pub const SpvDecoration__SpvDecorationSample: SpvDecoration_ = 17;
pub const SpvDecoration__SpvDecorationInvariant: SpvDecoration_ = 18;
pub const SpvDecoration__SpvDecorationRestrict: SpvDecoration_ = 19;
pub const SpvDecoration__SpvDecorationAliased: SpvDecoration_ = 20;
pub const SpvDecoration__SpvDecorationVolatile: SpvDecoration_ = 21;
pub const SpvDecoration__SpvDecorationConstant: SpvDecoration_ = 22;
pub const SpvDecoration__SpvDecorationCoherent: SpvDecoration_ = 23;
pub const SpvDecoration__SpvDecorationNonWritable: SpvDecoration_ = 24;
pub const SpvDecoration__SpvDecorationNonReadable: SpvDecoration_ = 25;
pub const SpvDecoration__SpvDecorationUniform: SpvDecoration_ = 26;
pub const SpvDecoration__SpvDecorationSaturatedConversion: SpvDecoration_ = 28;
pub const SpvDecoration__SpvDecorationStream: SpvDecoration_ = 29;
pub const SpvDecoration__SpvDecorationLocation: SpvDecoration_ = 30;
pub const SpvDecoration__SpvDecorationComponent: SpvDecoration_ = 31;
pub const SpvDecoration__SpvDecorationIndex: SpvDecoration_ = 32;
pub const SpvDecoration__SpvDecorationBinding: SpvDecoration_ = 33;
pub const SpvDecoration__SpvDecorationDescriptorSet: SpvDecoration_ = 34;
pub const SpvDecoration__SpvDecorationOffset: SpvDecoration_ = 35;
pub const SpvDecoration__SpvDecorationXfbBuffer: SpvDecoration_ = 36;
pub const SpvDecoration__SpvDecorationXfbStride: SpvDecoration_ = 37;
pub const SpvDecoration__SpvDecorationFuncParamAttr: SpvDecoration_ = 38;
pub const SpvDecoration__SpvDecorationFPRoundingMode: SpvDecoration_ = 39;
pub const SpvDecoration__SpvDecorationFPFastMathMode: SpvDecoration_ = 40;
pub const SpvDecoration__SpvDecorationLinkageAttributes: SpvDecoration_ = 41;
pub const SpvDecoration__SpvDecorationNoContraction: SpvDecoration_ = 42;
pub const SpvDecoration__SpvDecorationInputAttachmentIndex: SpvDecoration_ = 43;
pub const SpvDecoration__SpvDecorationAlignment: SpvDecoration_ = 44;
pub const SpvDecoration__SpvDecorationMaxByteOffset: SpvDecoration_ = 45;
pub const SpvDecoration__SpvDecorationAlignmentId: SpvDecoration_ = 46;
pub const SpvDecoration__SpvDecorationMaxByteOffsetId: SpvDecoration_ = 47;
pub const SpvDecoration__SpvDecorationNoSignedWrap: SpvDecoration_ = 4469;
pub const SpvDecoration__SpvDecorationNoUnsignedWrap: SpvDecoration_ = 4470;
pub const SpvDecoration__SpvDecorationExplicitInterpAMD: SpvDecoration_ = 4999;
pub const SpvDecoration__SpvDecorationOverrideCoverageNV: SpvDecoration_ = 5248;
pub const SpvDecoration__SpvDecorationPassthroughNV: SpvDecoration_ = 5250;
pub const SpvDecoration__SpvDecorationViewportRelativeNV: SpvDecoration_ = 5252;
pub const SpvDecoration__SpvDecorationSecondaryViewportRelativeNV: SpvDecoration_ = 5256;
pub const SpvDecoration__SpvDecorationPerPrimitiveNV: SpvDecoration_ = 5271;
pub const SpvDecoration__SpvDecorationPerViewNV: SpvDecoration_ = 5272;
pub const SpvDecoration__SpvDecorationPerTaskNV: SpvDecoration_ = 5273;
pub const SpvDecoration__SpvDecorationPerVertexNV: SpvDecoration_ = 5285;
pub const SpvDecoration__SpvDecorationNonUniformEXT: SpvDecoration_ = 5300;
pub const SpvDecoration__SpvDecorationHlslCounterBufferGOOGLE: SpvDecoration_ = 5634;
pub const SpvDecoration__SpvDecorationHlslSemanticGOOGLE: SpvDecoration_ = 5635;
pub const SpvDecoration__SpvDecorationMax: SpvDecoration_ = 2147483647;
pub type SpvDecoration_ = i32;
pub use self::SpvDecoration_ as SpvDecoration;
pub const SpvBuiltIn__SpvBuiltInPosition: SpvBuiltIn_ = 0;
pub const SpvBuiltIn__SpvBuiltInPointSize: SpvBuiltIn_ = 1;
pub const SpvBuiltIn__SpvBuiltInClipDistance: SpvBuiltIn_ = 3;
pub const SpvBuiltIn__SpvBuiltInCullDistance: SpvBuiltIn_ = 4;
pub const SpvBuiltIn__SpvBuiltInVertexId: SpvBuiltIn_ = 5;
pub const SpvBuiltIn__SpvBuiltInInstanceId: SpvBuiltIn_ = 6;
pub const SpvBuiltIn__SpvBuiltInPrimitiveId: SpvBuiltIn_ = 7;
pub const SpvBuiltIn__SpvBuiltInInvocationId: SpvBuiltIn_ = 8;
pub const SpvBuiltIn__SpvBuiltInLayer: SpvBuiltIn_ = 9;
pub const SpvBuiltIn__SpvBuiltInViewportIndex: SpvBuiltIn_ = 10;
pub const SpvBuiltIn__SpvBuiltInTessLevelOuter: SpvBuiltIn_ = 11;
pub const SpvBuiltIn__SpvBuiltInTessLevelInner: SpvBuiltIn_ = 12;
pub const SpvBuiltIn__SpvBuiltInTessCoord: SpvBuiltIn_ = 13;
pub const SpvBuiltIn__SpvBuiltInPatchVertices: SpvBuiltIn_ = 14;
pub const SpvBuiltIn__SpvBuiltInFragCoord: SpvBuiltIn_ = 15;
pub const SpvBuiltIn__SpvBuiltInPointCoord: SpvBuiltIn_ = 16;
pub const SpvBuiltIn__SpvBuiltInFrontFacing: SpvBuiltIn_ = 17;
pub const SpvBuiltIn__SpvBuiltInSampleId: SpvBuiltIn_ = 18;
pub const SpvBuiltIn__SpvBuiltInSamplePosition: SpvBuiltIn_ = 19;
pub const SpvBuiltIn__SpvBuiltInSampleMask: SpvBuiltIn_ = 20;
pub const SpvBuiltIn__SpvBuiltInFragDepth: SpvBuiltIn_ = 22;
pub const SpvBuiltIn__SpvBuiltInHelperInvocation: SpvBuiltIn_ = 23;
pub const SpvBuiltIn__SpvBuiltInNumWorkgroups: SpvBuiltIn_ = 24;
pub const SpvBuiltIn__SpvBuiltInWorkgroupSize: SpvBuiltIn_ = 25;
pub const SpvBuiltIn__SpvBuiltInWorkgroupId: SpvBuiltIn_ = 26;
pub const SpvBuiltIn__SpvBuiltInLocalInvocationId: SpvBuiltIn_ = 27;
pub const SpvBuiltIn__SpvBuiltInGlobalInvocationId: SpvBuiltIn_ = 28;
pub const SpvBuiltIn__SpvBuiltInLocalInvocationIndex: SpvBuiltIn_ = 29;
pub const SpvBuiltIn__SpvBuiltInWorkDim: SpvBuiltIn_ = 30;
pub const SpvBuiltIn__SpvBuiltInGlobalSize: SpvBuiltIn_ = 31;
pub const SpvBuiltIn__SpvBuiltInEnqueuedWorkgroupSize: SpvBuiltIn_ = 32;
pub const SpvBuiltIn__SpvBuiltInGlobalOffset: SpvBuiltIn_ = 33;
pub const SpvBuiltIn__SpvBuiltInGlobalLinearId: SpvBuiltIn_ = 34;
pub const SpvBuiltIn__SpvBuiltInSubgroupSize: SpvBuiltIn_ = 36;
pub const SpvBuiltIn__SpvBuiltInSubgroupMaxSize: SpvBuiltIn_ = 37;
pub const SpvBuiltIn__SpvBuiltInNumSubgroups: SpvBuiltIn_ = 38;
pub const SpvBuiltIn__SpvBuiltInNumEnqueuedSubgroups: SpvBuiltIn_ = 39;
pub const SpvBuiltIn__SpvBuiltInSubgroupId: SpvBuiltIn_ = 40;
pub const SpvBuiltIn__SpvBuiltInSubgroupLocalInvocationId: SpvBuiltIn_ = 41;
pub const SpvBuiltIn__SpvBuiltInVertexIndex: SpvBuiltIn_ = 42;
pub const SpvBuiltIn__SpvBuiltInInstanceIndex: SpvBuiltIn_ = 43;
pub const SpvBuiltIn__SpvBuiltInSubgroupEqMask: SpvBuiltIn_ = 4416;
pub const SpvBuiltIn__SpvBuiltInSubgroupEqMaskKHR: SpvBuiltIn_ = 4416;
pub const SpvBuiltIn__SpvBuiltInSubgroupGeMask: SpvBuiltIn_ = 4417;
pub const SpvBuiltIn__SpvBuiltInSubgroupGeMaskKHR: SpvBuiltIn_ = 4417;
pub const SpvBuiltIn__SpvBuiltInSubgroupGtMask: SpvBuiltIn_ = 4418;
pub const SpvBuiltIn__SpvBuiltInSubgroupGtMaskKHR: SpvBuiltIn_ = 4418;
pub const SpvBuiltIn__SpvBuiltInSubgroupLeMask: SpvBuiltIn_ = 4419;
pub const SpvBuiltIn__SpvBuiltInSubgroupLeMaskKHR: SpvBuiltIn_ = 4419;
pub const SpvBuiltIn__SpvBuiltInSubgroupLtMask: SpvBuiltIn_ = 4420;
pub const SpvBuiltIn__SpvBuiltInSubgroupLtMaskKHR: SpvBuiltIn_ = 4420;
pub const SpvBuiltIn__SpvBuiltInBaseVertex: SpvBuiltIn_ = 4424;
pub const SpvBuiltIn__SpvBuiltInBaseInstance: SpvBuiltIn_ = 4425;
pub const SpvBuiltIn__SpvBuiltInDrawIndex: SpvBuiltIn_ = 4426;
pub const SpvBuiltIn__SpvBuiltInDeviceIndex: SpvBuiltIn_ = 4438;
pub const SpvBuiltIn__SpvBuiltInViewIndex: SpvBuiltIn_ = 4440;
pub const SpvBuiltIn__SpvBuiltInBaryCoordNoPerspAMD: SpvBuiltIn_ = 4992;
pub const SpvBuiltIn__SpvBuiltInBaryCoordNoPerspCentroidAMD: SpvBuiltIn_ = 4993;
pub const SpvBuiltIn__SpvBuiltInBaryCoordNoPerspSampleAMD: SpvBuiltIn_ = 4994;
pub const SpvBuiltIn__SpvBuiltInBaryCoordSmoothAMD: SpvBuiltIn_ = 4995;
pub const SpvBuiltIn__SpvBuiltInBaryCoordSmoothCentroidAMD: SpvBuiltIn_ = 4996;
pub const SpvBuiltIn__SpvBuiltInBaryCoordSmoothSampleAMD: SpvBuiltIn_ = 4997;
pub const SpvBuiltIn__SpvBuiltInBaryCoordPullModelAMD: SpvBuiltIn_ = 4998;
pub const SpvBuiltIn__SpvBuiltInFragStencilRefEXT: SpvBuiltIn_ = 5014;
pub const SpvBuiltIn__SpvBuiltInViewportMaskNV: SpvBuiltIn_ = 5253;
pub const SpvBuiltIn__SpvBuiltInSecondaryPositionNV: SpvBuiltIn_ = 5257;
pub const SpvBuiltIn__SpvBuiltInSecondaryViewportMaskNV: SpvBuiltIn_ = 5258;
pub const SpvBuiltIn__SpvBuiltInPositionPerViewNV: SpvBuiltIn_ = 5261;
pub const SpvBuiltIn__SpvBuiltInViewportMaskPerViewNV: SpvBuiltIn_ = 5262;
pub const SpvBuiltIn__SpvBuiltInFullyCoveredEXT: SpvBuiltIn_ = 5264;
pub const SpvBuiltIn__SpvBuiltInTaskCountNV: SpvBuiltIn_ = 5274;
pub const SpvBuiltIn__SpvBuiltInPrimitiveCountNV: SpvBuiltIn_ = 5275;
pub const SpvBuiltIn__SpvBuiltInPrimitiveIndicesNV: SpvBuiltIn_ = 5276;
pub const SpvBuiltIn__SpvBuiltInClipDistancePerViewNV: SpvBuiltIn_ = 5277;
pub const SpvBuiltIn__SpvBuiltInCullDistancePerViewNV: SpvBuiltIn_ = 5278;
pub const SpvBuiltIn__SpvBuiltInLayerPerViewNV: SpvBuiltIn_ = 5279;
pub const SpvBuiltIn__SpvBuiltInMeshViewCountNV: SpvBuiltIn_ = 5280;
pub const SpvBuiltIn__SpvBuiltInMeshViewIndicesNV: SpvBuiltIn_ = 5281;
pub const SpvBuiltIn__SpvBuiltInBaryCoordNV: SpvBuiltIn_ = 5286;
pub const SpvBuiltIn__SpvBuiltInBaryCoordNoPerspNV: SpvBuiltIn_ = 5287;
pub const SpvBuiltIn__SpvBuiltInFragSizeEXT: SpvBuiltIn_ = 5292;
pub const SpvBuiltIn__SpvBuiltInFragmentSizeNV: SpvBuiltIn_ = 5292;
pub const SpvBuiltIn__SpvBuiltInFragInvocationCountEXT: SpvBuiltIn_ = 5293;
pub const SpvBuiltIn__SpvBuiltInInvocationsPerPixelNV: SpvBuiltIn_ = 5293;
pub const SpvBuiltIn__SpvBuiltInLaunchIdNV: SpvBuiltIn_ = 5319;
pub const SpvBuiltIn__SpvBuiltInLaunchSizeNV: SpvBuiltIn_ = 5320;
pub const SpvBuiltIn__SpvBuiltInWorldRayOriginNV: SpvBuiltIn_ = 5321;
pub const SpvBuiltIn__SpvBuiltInWorldRayDirectionNV: SpvBuiltIn_ = 5322;
pub const SpvBuiltIn__SpvBuiltInObjectRayOriginNV: SpvBuiltIn_ = 5323;
pub const SpvBuiltIn__SpvBuiltInObjectRayDirectionNV: SpvBuiltIn_ = 5324;
pub const SpvBuiltIn__SpvBuiltInRayTminNV: SpvBuiltIn_ = 5325;
pub const SpvBuiltIn__SpvBuiltInRayTmaxNV: SpvBuiltIn_ = 5326;
pub const SpvBuiltIn__SpvBuiltInInstanceCustomIndexNV: SpvBuiltIn_ = 5327;
pub const SpvBuiltIn__SpvBuiltInObjectToWorldNV: SpvBuiltIn_ = 5330;
pub const SpvBuiltIn__SpvBuiltInWorldToObjectNV: SpvBuiltIn_ = 5331;
pub const SpvBuiltIn__SpvBuiltInHitTNV: SpvBuiltIn_ = 5332;
pub const SpvBuiltIn__SpvBuiltInHitKindNV: SpvBuiltIn_ = 5333;
pub const SpvBuiltIn__SpvBuiltInIncomingRayFlagsNV: SpvBuiltIn_ = 5351;
pub const SpvBuiltIn__SpvBuiltInMax: SpvBuiltIn_ = 2147483647;
pub type SpvBuiltIn_ = i32;
pub use self::SpvBuiltIn_ as SpvBuiltIn;
pub const SpvSelectionControlShift__SpvSelectionControlFlattenShift: SpvSelectionControlShift_ = 0;
pub const SpvSelectionControlShift__SpvSelectionControlDontFlattenShift: SpvSelectionControlShift_ =
    1;
pub const SpvSelectionControlShift__SpvSelectionControlMax: SpvSelectionControlShift_ = 2147483647;
pub type SpvSelectionControlShift_ = i32;
pub use self::SpvSelectionControlShift_ as SpvSelectionControlShift;
pub const SpvSelectionControlMask__SpvSelectionControlMaskNone: SpvSelectionControlMask_ = 0;
pub const SpvSelectionControlMask__SpvSelectionControlFlattenMask: SpvSelectionControlMask_ = 1;
pub const SpvSelectionControlMask__SpvSelectionControlDontFlattenMask: SpvSelectionControlMask_ = 2;
pub type SpvSelectionControlMask_ = i32;
pub use self::SpvSelectionControlMask_ as SpvSelectionControlMask;
pub const SpvLoopControlShift__SpvLoopControlUnrollShift: SpvLoopControlShift_ = 0;
pub const SpvLoopControlShift__SpvLoopControlDontUnrollShift: SpvLoopControlShift_ = 1;
pub const SpvLoopControlShift__SpvLoopControlDependencyInfiniteShift: SpvLoopControlShift_ = 2;
pub const SpvLoopControlShift__SpvLoopControlDependencyLengthShift: SpvLoopControlShift_ = 3;
pub const SpvLoopControlShift__SpvLoopControlMax: SpvLoopControlShift_ = 2147483647;
pub type SpvLoopControlShift_ = i32;
pub use self::SpvLoopControlShift_ as SpvLoopControlShift;
pub const SpvLoopControlMask__SpvLoopControlMaskNone: SpvLoopControlMask_ = 0;
pub const SpvLoopControlMask__SpvLoopControlUnrollMask: SpvLoopControlMask_ = 1;
pub const SpvLoopControlMask__SpvLoopControlDontUnrollMask: SpvLoopControlMask_ = 2;
pub const SpvLoopControlMask__SpvLoopControlDependencyInfiniteMask: SpvLoopControlMask_ = 4;
pub const SpvLoopControlMask__SpvLoopControlDependencyLengthMask: SpvLoopControlMask_ = 8;
pub type SpvLoopControlMask_ = i32;
pub use self::SpvLoopControlMask_ as SpvLoopControlMask;
pub const SpvFunctionControlShift__SpvFunctionControlInlineShift: SpvFunctionControlShift_ = 0;
pub const SpvFunctionControlShift__SpvFunctionControlDontInlineShift: SpvFunctionControlShift_ = 1;
pub const SpvFunctionControlShift__SpvFunctionControlPureShift: SpvFunctionControlShift_ = 2;
pub const SpvFunctionControlShift__SpvFunctionControlConstShift: SpvFunctionControlShift_ = 3;
pub const SpvFunctionControlShift__SpvFunctionControlMax: SpvFunctionControlShift_ = 2147483647;
pub type SpvFunctionControlShift_ = i32;
pub use self::SpvFunctionControlShift_ as SpvFunctionControlShift;
pub const SpvFunctionControlMask__SpvFunctionControlMaskNone: SpvFunctionControlMask_ = 0;
pub const SpvFunctionControlMask__SpvFunctionControlInlineMask: SpvFunctionControlMask_ = 1;
pub const SpvFunctionControlMask__SpvFunctionControlDontInlineMask: SpvFunctionControlMask_ = 2;
pub const SpvFunctionControlMask__SpvFunctionControlPureMask: SpvFunctionControlMask_ = 4;
pub const SpvFunctionControlMask__SpvFunctionControlConstMask: SpvFunctionControlMask_ = 8;
pub type SpvFunctionControlMask_ = i32;
pub use self::SpvFunctionControlMask_ as SpvFunctionControlMask;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsAcquireShift: SpvMemorySemanticsShift_ = 1;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsReleaseShift: SpvMemorySemanticsShift_ = 2;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsAcquireReleaseShift: SpvMemorySemanticsShift_ =
    3;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsSequentiallyConsistentShift:
    SpvMemorySemanticsShift_ = 4;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsUniformMemoryShift: SpvMemorySemanticsShift_ =
    6;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsSubgroupMemoryShift: SpvMemorySemanticsShift_ =
    7;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsWorkgroupMemoryShift:
    SpvMemorySemanticsShift_ = 8;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsCrossWorkgroupMemoryShift:
    SpvMemorySemanticsShift_ = 9;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsAtomicCounterMemoryShift:
    SpvMemorySemanticsShift_ = 10;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsImageMemoryShift: SpvMemorySemanticsShift_ =
    11;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsOutputMemoryKHRShift:
    SpvMemorySemanticsShift_ = 12;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsMakeAvailableKHRShift:
    SpvMemorySemanticsShift_ = 13;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsMakeVisibleKHRShift: SpvMemorySemanticsShift_ =
    14;
pub const SpvMemorySemanticsShift__SpvMemorySemanticsMax: SpvMemorySemanticsShift_ = 2147483647;
pub type SpvMemorySemanticsShift_ = i32;
pub use self::SpvMemorySemanticsShift_ as SpvMemorySemanticsShift;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsMaskNone: SpvMemorySemanticsMask_ = 0;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsAcquireMask: SpvMemorySemanticsMask_ = 2;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsReleaseMask: SpvMemorySemanticsMask_ = 4;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsAcquireReleaseMask: SpvMemorySemanticsMask_ = 8;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsSequentiallyConsistentMask:
    SpvMemorySemanticsMask_ = 16;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsUniformMemoryMask: SpvMemorySemanticsMask_ = 64;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsSubgroupMemoryMask: SpvMemorySemanticsMask_ =
    128;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsWorkgroupMemoryMask: SpvMemorySemanticsMask_ =
    256;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsCrossWorkgroupMemoryMask:
    SpvMemorySemanticsMask_ = 512;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsAtomicCounterMemoryMask:
    SpvMemorySemanticsMask_ = 1024;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsImageMemoryMask: SpvMemorySemanticsMask_ = 2048;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsOutputMemoryKHRMask: SpvMemorySemanticsMask_ =
    4096;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsMakeAvailableKHRMask: SpvMemorySemanticsMask_ =
    8192;
pub const SpvMemorySemanticsMask__SpvMemorySemanticsMakeVisibleKHRMask: SpvMemorySemanticsMask_ =
    16384;
pub type SpvMemorySemanticsMask_ = i32;
pub use self::SpvMemorySemanticsMask_ as SpvMemorySemanticsMask;
pub const SpvMemoryAccessShift__SpvMemoryAccessVolatileShift: SpvMemoryAccessShift_ = 0;
pub const SpvMemoryAccessShift__SpvMemoryAccessAlignedShift: SpvMemoryAccessShift_ = 1;
pub const SpvMemoryAccessShift__SpvMemoryAccessNontemporalShift: SpvMemoryAccessShift_ = 2;
pub const SpvMemoryAccessShift__SpvMemoryAccessMakePointerAvailableKHRShift: SpvMemoryAccessShift_ =
    3;
pub const SpvMemoryAccessShift__SpvMemoryAccessMakePointerVisibleKHRShift: SpvMemoryAccessShift_ =
    4;
pub const SpvMemoryAccessShift__SpvMemoryAccessNonPrivatePointerKHRShift: SpvMemoryAccessShift_ = 5;
pub const SpvMemoryAccessShift__SpvMemoryAccessMax: SpvMemoryAccessShift_ = 2147483647;
pub type SpvMemoryAccessShift_ = i32;
pub use self::SpvMemoryAccessShift_ as SpvMemoryAccessShift;
pub const SpvMemoryAccessMask__SpvMemoryAccessMaskNone: SpvMemoryAccessMask_ = 0;
pub const SpvMemoryAccessMask__SpvMemoryAccessVolatileMask: SpvMemoryAccessMask_ = 1;
pub const SpvMemoryAccessMask__SpvMemoryAccessAlignedMask: SpvMemoryAccessMask_ = 2;
pub const SpvMemoryAccessMask__SpvMemoryAccessNontemporalMask: SpvMemoryAccessMask_ = 4;
pub const SpvMemoryAccessMask__SpvMemoryAccessMakePointerAvailableKHRMask: SpvMemoryAccessMask_ = 8;
pub const SpvMemoryAccessMask__SpvMemoryAccessMakePointerVisibleKHRMask: SpvMemoryAccessMask_ = 16;
pub const SpvMemoryAccessMask__SpvMemoryAccessNonPrivatePointerKHRMask: SpvMemoryAccessMask_ = 32;
pub type SpvMemoryAccessMask_ = i32;
pub use self::SpvMemoryAccessMask_ as SpvMemoryAccessMask;
pub const SpvScope__SpvScopeCrossDevice: SpvScope_ = 0;
pub const SpvScope__SpvScopeDevice: SpvScope_ = 1;
pub const SpvScope__SpvScopeWorkgroup: SpvScope_ = 2;
pub const SpvScope__SpvScopeSubgroup: SpvScope_ = 3;
pub const SpvScope__SpvScopeInvocation: SpvScope_ = 4;
pub const SpvScope__SpvScopeQueueFamilyKHR: SpvScope_ = 5;
pub const SpvScope__SpvScopeMax: SpvScope_ = 2147483647;
pub type SpvScope_ = i32;
pub use self::SpvScope_ as SpvScope;
pub const SpvGroupOperation__SpvGroupOperationReduce: SpvGroupOperation_ = 0;
pub const SpvGroupOperation__SpvGroupOperationInclusiveScan: SpvGroupOperation_ = 1;
pub const SpvGroupOperation__SpvGroupOperationExclusiveScan: SpvGroupOperation_ = 2;
pub const SpvGroupOperation__SpvGroupOperationClusteredReduce: SpvGroupOperation_ = 3;
pub const SpvGroupOperation__SpvGroupOperationPartitionedReduceNV: SpvGroupOperation_ = 6;
pub const SpvGroupOperation__SpvGroupOperationPartitionedInclusiveScanNV: SpvGroupOperation_ = 7;
pub const SpvGroupOperation__SpvGroupOperationPartitionedExclusiveScanNV: SpvGroupOperation_ = 8;
pub const SpvGroupOperation__SpvGroupOperationMax: SpvGroupOperation_ = 2147483647;
pub type SpvGroupOperation_ = i32;
pub use self::SpvGroupOperation_ as SpvGroupOperation;
pub const SpvKernelEnqueueFlags__SpvKernelEnqueueFlagsNoWait: SpvKernelEnqueueFlags_ = 0;
pub const SpvKernelEnqueueFlags__SpvKernelEnqueueFlagsWaitKernel: SpvKernelEnqueueFlags_ = 1;
pub const SpvKernelEnqueueFlags__SpvKernelEnqueueFlagsWaitWorkGroup: SpvKernelEnqueueFlags_ = 2;
pub const SpvKernelEnqueueFlags__SpvKernelEnqueueFlagsMax: SpvKernelEnqueueFlags_ = 2147483647;
pub type SpvKernelEnqueueFlags_ = i32;
pub use self::SpvKernelEnqueueFlags_ as SpvKernelEnqueueFlags;
pub const SpvKernelProfilingInfoShift__SpvKernelProfilingInfoCmdExecTimeShift:
    SpvKernelProfilingInfoShift_ = 0;
pub const SpvKernelProfilingInfoShift__SpvKernelProfilingInfoMax: SpvKernelProfilingInfoShift_ =
    2147483647;
pub type SpvKernelProfilingInfoShift_ = i32;
pub use self::SpvKernelProfilingInfoShift_ as SpvKernelProfilingInfoShift;
pub const SpvKernelProfilingInfoMask__SpvKernelProfilingInfoMaskNone: SpvKernelProfilingInfoMask_ =
    0;
pub const SpvKernelProfilingInfoMask__SpvKernelProfilingInfoCmdExecTimeMask:
    SpvKernelProfilingInfoMask_ = 1;
pub type SpvKernelProfilingInfoMask_ = i32;
pub use self::SpvKernelProfilingInfoMask_ as SpvKernelProfilingInfoMask;
pub const SpvCapability__SpvCapabilityMatrix: SpvCapability_ = 0;
pub const SpvCapability__SpvCapabilityShader: SpvCapability_ = 1;
pub const SpvCapability__SpvCapabilityGeometry: SpvCapability_ = 2;
pub const SpvCapability__SpvCapabilityTessellation: SpvCapability_ = 3;
pub const SpvCapability__SpvCapabilityAddresses: SpvCapability_ = 4;
pub const SpvCapability__SpvCapabilityLinkage: SpvCapability_ = 5;
pub const SpvCapability__SpvCapabilityKernel: SpvCapability_ = 6;
pub const SpvCapability__SpvCapabilityVector16: SpvCapability_ = 7;
pub const SpvCapability__SpvCapabilityFloat16Buffer: SpvCapability_ = 8;
pub const SpvCapability__SpvCapabilityFloat16: SpvCapability_ = 9;
pub const SpvCapability__SpvCapabilityFloat64: SpvCapability_ = 10;
pub const SpvCapability__SpvCapabilityInt64: SpvCapability_ = 11;
pub const SpvCapability__SpvCapabilityInt64Atomics: SpvCapability_ = 12;
pub const SpvCapability__SpvCapabilityImageBasic: SpvCapability_ = 13;
pub const SpvCapability__SpvCapabilityImageReadWrite: SpvCapability_ = 14;
pub const SpvCapability__SpvCapabilityImageMipmap: SpvCapability_ = 15;
pub const SpvCapability__SpvCapabilityPipes: SpvCapability_ = 17;
pub const SpvCapability__SpvCapabilityGroups: SpvCapability_ = 18;
pub const SpvCapability__SpvCapabilityDeviceEnqueue: SpvCapability_ = 19;
pub const SpvCapability__SpvCapabilityLiteralSampler: SpvCapability_ = 20;
pub const SpvCapability__SpvCapabilityAtomicStorage: SpvCapability_ = 21;
pub const SpvCapability__SpvCapabilityInt16: SpvCapability_ = 22;
pub const SpvCapability__SpvCapabilityTessellationPointSize: SpvCapability_ = 23;
pub const SpvCapability__SpvCapabilityGeometryPointSize: SpvCapability_ = 24;
pub const SpvCapability__SpvCapabilityImageGatherExtended: SpvCapability_ = 25;
pub const SpvCapability__SpvCapabilityStorageImageMultisample: SpvCapability_ = 27;
pub const SpvCapability__SpvCapabilityUniformBufferArrayDynamicIndexing: SpvCapability_ = 28;
pub const SpvCapability__SpvCapabilitySampledImageArrayDynamicIndexing: SpvCapability_ = 29;
pub const SpvCapability__SpvCapabilityStorageBufferArrayDynamicIndexing: SpvCapability_ = 30;
pub const SpvCapability__SpvCapabilityStorageImageArrayDynamicIndexing: SpvCapability_ = 31;
pub const SpvCapability__SpvCapabilityClipDistance: SpvCapability_ = 32;
pub const SpvCapability__SpvCapabilityCullDistance: SpvCapability_ = 33;
pub const SpvCapability__SpvCapabilityImageCubeArray: SpvCapability_ = 34;
pub const SpvCapability__SpvCapabilitySampleRateShading: SpvCapability_ = 35;
pub const SpvCapability__SpvCapabilityImageRect: SpvCapability_ = 36;
pub const SpvCapability__SpvCapabilitySampledRect: SpvCapability_ = 37;
pub const SpvCapability__SpvCapabilityGenericPointer: SpvCapability_ = 38;
pub const SpvCapability__SpvCapabilityInt8: SpvCapability_ = 39;
pub const SpvCapability__SpvCapabilityInputAttachment: SpvCapability_ = 40;
pub const SpvCapability__SpvCapabilitySparseResidency: SpvCapability_ = 41;
pub const SpvCapability__SpvCapabilityMinLod: SpvCapability_ = 42;
pub const SpvCapability__SpvCapabilitySampled1D: SpvCapability_ = 43;
pub const SpvCapability__SpvCapabilityImage1D: SpvCapability_ = 44;
pub const SpvCapability__SpvCapabilitySampledCubeArray: SpvCapability_ = 45;
pub const SpvCapability__SpvCapabilitySampledBuffer: SpvCapability_ = 46;
pub const SpvCapability__SpvCapabilityImageBuffer: SpvCapability_ = 47;
pub const SpvCapability__SpvCapabilityImageMSArray: SpvCapability_ = 48;
pub const SpvCapability__SpvCapabilityStorageImageExtendedFormats: SpvCapability_ = 49;
pub const SpvCapability__SpvCapabilityImageQuery: SpvCapability_ = 50;
pub const SpvCapability__SpvCapabilityDerivativeControl: SpvCapability_ = 51;
pub const SpvCapability__SpvCapabilityInterpolationFunction: SpvCapability_ = 52;
pub const SpvCapability__SpvCapabilityTransformFeedback: SpvCapability_ = 53;
pub const SpvCapability__SpvCapabilityGeometryStreams: SpvCapability_ = 54;
pub const SpvCapability__SpvCapabilityStorageImageReadWithoutFormat: SpvCapability_ = 55;
pub const SpvCapability__SpvCapabilityStorageImageWriteWithoutFormat: SpvCapability_ = 56;
pub const SpvCapability__SpvCapabilityMultiViewport: SpvCapability_ = 57;
pub const SpvCapability__SpvCapabilitySubgroupDispatch: SpvCapability_ = 58;
pub const SpvCapability__SpvCapabilityNamedBarrier: SpvCapability_ = 59;
pub const SpvCapability__SpvCapabilityPipeStorage: SpvCapability_ = 60;
pub const SpvCapability__SpvCapabilityGroupNonUniform: SpvCapability_ = 61;
pub const SpvCapability__SpvCapabilityGroupNonUniformVote: SpvCapability_ = 62;
pub const SpvCapability__SpvCapabilityGroupNonUniformArithmetic: SpvCapability_ = 63;
pub const SpvCapability__SpvCapabilityGroupNonUniformBallot: SpvCapability_ = 64;
pub const SpvCapability__SpvCapabilityGroupNonUniformShuffle: SpvCapability_ = 65;
pub const SpvCapability__SpvCapabilityGroupNonUniformShuffleRelative: SpvCapability_ = 66;
pub const SpvCapability__SpvCapabilityGroupNonUniformClustered: SpvCapability_ = 67;
pub const SpvCapability__SpvCapabilityGroupNonUniformQuad: SpvCapability_ = 68;
pub const SpvCapability__SpvCapabilitySubgroupBallotKHR: SpvCapability_ = 4423;
pub const SpvCapability__SpvCapabilityDrawParameters: SpvCapability_ = 4427;
pub const SpvCapability__SpvCapabilitySubgroupVoteKHR: SpvCapability_ = 4431;
pub const SpvCapability__SpvCapabilityStorageBuffer16BitAccess: SpvCapability_ = 4433;
pub const SpvCapability__SpvCapabilityStorageUniformBufferBlock16: SpvCapability_ = 4433;
pub const SpvCapability__SpvCapabilityStorageUniform16: SpvCapability_ = 4434;
pub const SpvCapability__SpvCapabilityUniformAndStorageBuffer16BitAccess: SpvCapability_ = 4434;
pub const SpvCapability__SpvCapabilityStoragePushConstant16: SpvCapability_ = 4435;
pub const SpvCapability__SpvCapabilityStorageInputOutput16: SpvCapability_ = 4436;
pub const SpvCapability__SpvCapabilityDeviceGroup: SpvCapability_ = 4437;
pub const SpvCapability__SpvCapabilityMultiView: SpvCapability_ = 4439;
pub const SpvCapability__SpvCapabilityVariablePointersStorageBuffer: SpvCapability_ = 4441;
pub const SpvCapability__SpvCapabilityVariablePointers: SpvCapability_ = 4442;
pub const SpvCapability__SpvCapabilityAtomicStorageOps: SpvCapability_ = 4445;
pub const SpvCapability__SpvCapabilitySampleMaskPostDepthCoverage: SpvCapability_ = 4447;
pub const SpvCapability__SpvCapabilityStorageBuffer8BitAccess: SpvCapability_ = 4448;
pub const SpvCapability__SpvCapabilityUniformAndStorageBuffer8BitAccess: SpvCapability_ = 4449;
pub const SpvCapability__SpvCapabilityStoragePushConstant8: SpvCapability_ = 4450;
pub const SpvCapability__SpvCapabilityDenormPreserve: SpvCapability_ = 4464;
pub const SpvCapability__SpvCapabilityDenormFlushToZero: SpvCapability_ = 4465;
pub const SpvCapability__SpvCapabilitySignedZeroInfNanPreserve: SpvCapability_ = 4466;
pub const SpvCapability__SpvCapabilityRoundingModeRTE: SpvCapability_ = 4467;
pub const SpvCapability__SpvCapabilityRoundingModeRTZ: SpvCapability_ = 4468;
pub const SpvCapability__SpvCapabilityFloat16ImageAMD: SpvCapability_ = 5008;
pub const SpvCapability__SpvCapabilityImageGatherBiasLodAMD: SpvCapability_ = 5009;
pub const SpvCapability__SpvCapabilityFragmentMaskAMD: SpvCapability_ = 5010;
pub const SpvCapability__SpvCapabilityStencilExportEXT: SpvCapability_ = 5013;
pub const SpvCapability__SpvCapabilityImageReadWriteLodAMD: SpvCapability_ = 5015;
pub const SpvCapability__SpvCapabilitySampleMaskOverrideCoverageNV: SpvCapability_ = 5249;
pub const SpvCapability__SpvCapabilityGeometryShaderPassthroughNV: SpvCapability_ = 5251;
pub const SpvCapability__SpvCapabilityShaderViewportIndexLayerEXT: SpvCapability_ = 5254;
pub const SpvCapability__SpvCapabilityShaderViewportIndexLayerNV: SpvCapability_ = 5254;
pub const SpvCapability__SpvCapabilityShaderViewportMaskNV: SpvCapability_ = 5255;
pub const SpvCapability__SpvCapabilityShaderStereoViewNV: SpvCapability_ = 5259;
pub const SpvCapability__SpvCapabilityPerViewAttributesNV: SpvCapability_ = 5260;
pub const SpvCapability__SpvCapabilityFragmentFullyCoveredEXT: SpvCapability_ = 5265;
pub const SpvCapability__SpvCapabilityMeshShadingNV: SpvCapability_ = 5266;
pub const SpvCapability__SpvCapabilityImageFootprintNV: SpvCapability_ = 5282;
pub const SpvCapability__SpvCapabilityFragmentBarycentricNV: SpvCapability_ = 5284;
pub const SpvCapability__SpvCapabilityComputeDerivativeGroupQuadsNV: SpvCapability_ = 5288;
pub const SpvCapability__SpvCapabilityFragmentDensityEXT: SpvCapability_ = 5291;
pub const SpvCapability__SpvCapabilityShadingRateNV: SpvCapability_ = 5291;
pub const SpvCapability__SpvCapabilityGroupNonUniformPartitionedNV: SpvCapability_ = 5297;
pub const SpvCapability__SpvCapabilityShaderNonUniformEXT: SpvCapability_ = 5301;
pub const SpvCapability__SpvCapabilityRuntimeDescriptorArrayEXT: SpvCapability_ = 5302;
pub const SpvCapability__SpvCapabilityInputAttachmentArrayDynamicIndexingEXT: SpvCapability_ = 5303;
pub const SpvCapability__SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT: SpvCapability_ =
    5304;
pub const SpvCapability__SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT: SpvCapability_ =
    5305;
pub const SpvCapability__SpvCapabilityUniformBufferArrayNonUniformIndexingEXT: SpvCapability_ =
    5306;
pub const SpvCapability__SpvCapabilitySampledImageArrayNonUniformIndexingEXT: SpvCapability_ = 5307;
pub const SpvCapability__SpvCapabilityStorageBufferArrayNonUniformIndexingEXT: SpvCapability_ =
    5308;
pub const SpvCapability__SpvCapabilityStorageImageArrayNonUniformIndexingEXT: SpvCapability_ = 5309;
pub const SpvCapability__SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT: SpvCapability_ =
    5310;
pub const SpvCapability__SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT: SpvCapability_ =
    5311;
pub const SpvCapability__SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT: SpvCapability_ =
    5312;
pub const SpvCapability__SpvCapabilityRayTracingNV: SpvCapability_ = 5340;
pub const SpvCapability__SpvCapabilityVulkanMemoryModelKHR: SpvCapability_ = 5345;
pub const SpvCapability__SpvCapabilityVulkanMemoryModelDeviceScopeKHR: SpvCapability_ = 5346;
pub const SpvCapability__SpvCapabilityComputeDerivativeGroupLinearNV: SpvCapability_ = 5350;
pub const SpvCapability__SpvCapabilitySubgroupShuffleINTEL: SpvCapability_ = 5568;
pub const SpvCapability__SpvCapabilitySubgroupBufferBlockIOINTEL: SpvCapability_ = 5569;
pub const SpvCapability__SpvCapabilitySubgroupImageBlockIOINTEL: SpvCapability_ = 5570;
pub const SpvCapability__SpvCapabilityMax: SpvCapability_ = 2147483647;
pub type SpvCapability_ = i32;
pub use self::SpvCapability_ as SpvCapability;
pub const SpvOp__SpvOpNop: SpvOp_ = 0;
pub const SpvOp__SpvOpUndef: SpvOp_ = 1;
pub const SpvOp__SpvOpSourceContinued: SpvOp_ = 2;
pub const SpvOp__SpvOpSource: SpvOp_ = 3;
pub const SpvOp__SpvOpSourceExtension: SpvOp_ = 4;
pub const SpvOp__SpvOpName: SpvOp_ = 5;
pub const SpvOp__SpvOpMemberName: SpvOp_ = 6;
pub const SpvOp__SpvOpString: SpvOp_ = 7;
pub const SpvOp__SpvOpLine: SpvOp_ = 8;
pub const SpvOp__SpvOpExtension: SpvOp_ = 10;
pub const SpvOp__SpvOpExtInstImport: SpvOp_ = 11;
pub const SpvOp__SpvOpExtInst: SpvOp_ = 12;
pub const SpvOp__SpvOpMemoryModel: SpvOp_ = 14;
pub const SpvOp__SpvOpEntryPoint: SpvOp_ = 15;
pub const SpvOp__SpvOpExecutionMode: SpvOp_ = 16;
pub const SpvOp__SpvOpCapability: SpvOp_ = 17;
pub const SpvOp__SpvOpTypeVoid: SpvOp_ = 19;
pub const SpvOp__SpvOpTypeBool: SpvOp_ = 20;
pub const SpvOp__SpvOpTypeInt: SpvOp_ = 21;
pub const SpvOp__SpvOpTypeFloat: SpvOp_ = 22;
pub const SpvOp__SpvOpTypeVector: SpvOp_ = 23;
pub const SpvOp__SpvOpTypeMatrix: SpvOp_ = 24;
pub const SpvOp__SpvOpTypeImage: SpvOp_ = 25;
pub const SpvOp__SpvOpTypeSampler: SpvOp_ = 26;
pub const SpvOp__SpvOpTypeSampledImage: SpvOp_ = 27;
pub const SpvOp__SpvOpTypeArray: SpvOp_ = 28;
pub const SpvOp__SpvOpTypeRuntimeArray: SpvOp_ = 29;
pub const SpvOp__SpvOpTypeStruct: SpvOp_ = 30;
pub const SpvOp__SpvOpTypeOpaque: SpvOp_ = 31;
pub const SpvOp__SpvOpTypePointer: SpvOp_ = 32;
pub const SpvOp__SpvOpTypeFunction: SpvOp_ = 33;
pub const SpvOp__SpvOpTypeEvent: SpvOp_ = 34;
pub const SpvOp__SpvOpTypeDeviceEvent: SpvOp_ = 35;
pub const SpvOp__SpvOpTypeReserveId: SpvOp_ = 36;
pub const SpvOp__SpvOpTypeQueue: SpvOp_ = 37;
pub const SpvOp__SpvOpTypePipe: SpvOp_ = 38;
pub const SpvOp__SpvOpTypeForwardPointer: SpvOp_ = 39;
pub const SpvOp__SpvOpConstantTrue: SpvOp_ = 41;
pub const SpvOp__SpvOpConstantFalse: SpvOp_ = 42;
pub const SpvOp__SpvOpConstant: SpvOp_ = 43;
pub const SpvOp__SpvOpConstantComposite: SpvOp_ = 44;
pub const SpvOp__SpvOpConstantSampler: SpvOp_ = 45;
pub const SpvOp__SpvOpConstantNull: SpvOp_ = 46;
pub const SpvOp__SpvOpSpecConstantTrue: SpvOp_ = 48;
pub const SpvOp__SpvOpSpecConstantFalse: SpvOp_ = 49;
pub const SpvOp__SpvOpSpecConstant: SpvOp_ = 50;
pub const SpvOp__SpvOpSpecConstantComposite: SpvOp_ = 51;
pub const SpvOp__SpvOpSpecConstantOp: SpvOp_ = 52;
pub const SpvOp__SpvOpFunction: SpvOp_ = 54;
pub const SpvOp__SpvOpFunctionParameter: SpvOp_ = 55;
pub const SpvOp__SpvOpFunctionEnd: SpvOp_ = 56;
pub const SpvOp__SpvOpFunctionCall: SpvOp_ = 57;
pub const SpvOp__SpvOpVariable: SpvOp_ = 59;
pub const SpvOp__SpvOpImageTexelPointer: SpvOp_ = 60;
pub const SpvOp__SpvOpLoad: SpvOp_ = 61;
pub const SpvOp__SpvOpStore: SpvOp_ = 62;
pub const SpvOp__SpvOpCopyMemory: SpvOp_ = 63;
pub const SpvOp__SpvOpCopyMemorySized: SpvOp_ = 64;
pub const SpvOp__SpvOpAccessChain: SpvOp_ = 65;
pub const SpvOp__SpvOpInBoundsAccessChain: SpvOp_ = 66;
pub const SpvOp__SpvOpPtrAccessChain: SpvOp_ = 67;
pub const SpvOp__SpvOpArrayLength: SpvOp_ = 68;
pub const SpvOp__SpvOpGenericPtrMemSemantics: SpvOp_ = 69;
pub const SpvOp__SpvOpInBoundsPtrAccessChain: SpvOp_ = 70;
pub const SpvOp__SpvOpDecorate: SpvOp_ = 71;
pub const SpvOp__SpvOpMemberDecorate: SpvOp_ = 72;
pub const SpvOp__SpvOpDecorationGroup: SpvOp_ = 73;
pub const SpvOp__SpvOpGroupDecorate: SpvOp_ = 74;
pub const SpvOp__SpvOpGroupMemberDecorate: SpvOp_ = 75;
pub const SpvOp__SpvOpVectorExtractDynamic: SpvOp_ = 77;
pub const SpvOp__SpvOpVectorInsertDynamic: SpvOp_ = 78;
pub const SpvOp__SpvOpVectorShuffle: SpvOp_ = 79;
pub const SpvOp__SpvOpCompositeConstruct: SpvOp_ = 80;
pub const SpvOp__SpvOpCompositeExtract: SpvOp_ = 81;
pub const SpvOp__SpvOpCompositeInsert: SpvOp_ = 82;
pub const SpvOp__SpvOpCopyObject: SpvOp_ = 83;
pub const SpvOp__SpvOpTranspose: SpvOp_ = 84;
pub const SpvOp__SpvOpSampledImage: SpvOp_ = 86;
pub const SpvOp__SpvOpImageSampleImplicitLod: SpvOp_ = 87;
pub const SpvOp__SpvOpImageSampleExplicitLod: SpvOp_ = 88;
pub const SpvOp__SpvOpImageSampleDrefImplicitLod: SpvOp_ = 89;
pub const SpvOp__SpvOpImageSampleDrefExplicitLod: SpvOp_ = 90;
pub const SpvOp__SpvOpImageSampleProjImplicitLod: SpvOp_ = 91;
pub const SpvOp__SpvOpImageSampleProjExplicitLod: SpvOp_ = 92;
pub const SpvOp__SpvOpImageSampleProjDrefImplicitLod: SpvOp_ = 93;
pub const SpvOp__SpvOpImageSampleProjDrefExplicitLod: SpvOp_ = 94;
pub const SpvOp__SpvOpImageFetch: SpvOp_ = 95;
pub const SpvOp__SpvOpImageGather: SpvOp_ = 96;
pub const SpvOp__SpvOpImageDrefGather: SpvOp_ = 97;
pub const SpvOp__SpvOpImageRead: SpvOp_ = 98;
pub const SpvOp__SpvOpImageWrite: SpvOp_ = 99;
pub const SpvOp__SpvOpImage: SpvOp_ = 100;
pub const SpvOp__SpvOpImageQueryFormat: SpvOp_ = 101;
pub const SpvOp__SpvOpImageQueryOrder: SpvOp_ = 102;
pub const SpvOp__SpvOpImageQuerySizeLod: SpvOp_ = 103;
pub const SpvOp__SpvOpImageQuerySize: SpvOp_ = 104;
pub const SpvOp__SpvOpImageQueryLod: SpvOp_ = 105;
pub const SpvOp__SpvOpImageQueryLevels: SpvOp_ = 106;
pub const SpvOp__SpvOpImageQuerySamples: SpvOp_ = 107;
pub const SpvOp__SpvOpConvertFToU: SpvOp_ = 109;
pub const SpvOp__SpvOpConvertFToS: SpvOp_ = 110;
pub const SpvOp__SpvOpConvertSToF: SpvOp_ = 111;
pub const SpvOp__SpvOpConvertUToF: SpvOp_ = 112;
pub const SpvOp__SpvOpUConvert: SpvOp_ = 113;
pub const SpvOp__SpvOpSConvert: SpvOp_ = 114;
pub const SpvOp__SpvOpFConvert: SpvOp_ = 115;
pub const SpvOp__SpvOpQuantizeToF16: SpvOp_ = 116;
pub const SpvOp__SpvOpConvertPtrToU: SpvOp_ = 117;
pub const SpvOp__SpvOpSatConvertSToU: SpvOp_ = 118;
pub const SpvOp__SpvOpSatConvertUToS: SpvOp_ = 119;
pub const SpvOp__SpvOpConvertUToPtr: SpvOp_ = 120;
pub const SpvOp__SpvOpPtrCastToGeneric: SpvOp_ = 121;
pub const SpvOp__SpvOpGenericCastToPtr: SpvOp_ = 122;
pub const SpvOp__SpvOpGenericCastToPtrExplicit: SpvOp_ = 123;
pub const SpvOp__SpvOpBitcast: SpvOp_ = 124;
pub const SpvOp__SpvOpSNegate: SpvOp_ = 126;
pub const SpvOp__SpvOpFNegate: SpvOp_ = 127;
pub const SpvOp__SpvOpIAdd: SpvOp_ = 128;
pub const SpvOp__SpvOpFAdd: SpvOp_ = 129;
pub const SpvOp__SpvOpISub: SpvOp_ = 130;
pub const SpvOp__SpvOpFSub: SpvOp_ = 131;
pub const SpvOp__SpvOpIMul: SpvOp_ = 132;
pub const SpvOp__SpvOpFMul: SpvOp_ = 133;
pub const SpvOp__SpvOpUDiv: SpvOp_ = 134;
pub const SpvOp__SpvOpSDiv: SpvOp_ = 135;
pub const SpvOp__SpvOpFDiv: SpvOp_ = 136;
pub const SpvOp__SpvOpUMod: SpvOp_ = 137;
pub const SpvOp__SpvOpSRem: SpvOp_ = 138;
pub const SpvOp__SpvOpSMod: SpvOp_ = 139;
pub const SpvOp__SpvOpFRem: SpvOp_ = 140;
pub const SpvOp__SpvOpFMod: SpvOp_ = 141;
pub const SpvOp__SpvOpVectorTimesScalar: SpvOp_ = 142;
pub const SpvOp__SpvOpMatrixTimesScalar: SpvOp_ = 143;
pub const SpvOp__SpvOpVectorTimesMatrix: SpvOp_ = 144;
pub const SpvOp__SpvOpMatrixTimesVector: SpvOp_ = 145;
pub const SpvOp__SpvOpMatrixTimesMatrix: SpvOp_ = 146;
pub const SpvOp__SpvOpOuterProduct: SpvOp_ = 147;
pub const SpvOp__SpvOpDot: SpvOp_ = 148;
pub const SpvOp__SpvOpIAddCarry: SpvOp_ = 149;
pub const SpvOp__SpvOpISubBorrow: SpvOp_ = 150;
pub const SpvOp__SpvOpUMulExtended: SpvOp_ = 151;
pub const SpvOp__SpvOpSMulExtended: SpvOp_ = 152;
pub const SpvOp__SpvOpAny: SpvOp_ = 154;
pub const SpvOp__SpvOpAll: SpvOp_ = 155;
pub const SpvOp__SpvOpIsNan: SpvOp_ = 156;
pub const SpvOp__SpvOpIsInf: SpvOp_ = 157;
pub const SpvOp__SpvOpIsFinite: SpvOp_ = 158;
pub const SpvOp__SpvOpIsNormal: SpvOp_ = 159;
pub const SpvOp__SpvOpSignBitSet: SpvOp_ = 160;
pub const SpvOp__SpvOpLessOrGreater: SpvOp_ = 161;
pub const SpvOp__SpvOpOrdered: SpvOp_ = 162;
pub const SpvOp__SpvOpUnordered: SpvOp_ = 163;
pub const SpvOp__SpvOpLogicalEqual: SpvOp_ = 164;
pub const SpvOp__SpvOpLogicalNotEqual: SpvOp_ = 165;
pub const SpvOp__SpvOpLogicalOr: SpvOp_ = 166;
pub const SpvOp__SpvOpLogicalAnd: SpvOp_ = 167;
pub const SpvOp__SpvOpLogicalNot: SpvOp_ = 168;
pub const SpvOp__SpvOpSelect: SpvOp_ = 169;
pub const SpvOp__SpvOpIEqual: SpvOp_ = 170;
pub const SpvOp__SpvOpINotEqual: SpvOp_ = 171;
pub const SpvOp__SpvOpUGreaterThan: SpvOp_ = 172;
pub const SpvOp__SpvOpSGreaterThan: SpvOp_ = 173;
pub const SpvOp__SpvOpUGreaterThanEqual: SpvOp_ = 174;
pub const SpvOp__SpvOpSGreaterThanEqual: SpvOp_ = 175;
pub const SpvOp__SpvOpULessThan: SpvOp_ = 176;
pub const SpvOp__SpvOpSLessThan: SpvOp_ = 177;
pub const SpvOp__SpvOpULessThanEqual: SpvOp_ = 178;
pub const SpvOp__SpvOpSLessThanEqual: SpvOp_ = 179;
pub const SpvOp__SpvOpFOrdEqual: SpvOp_ = 180;
pub const SpvOp__SpvOpFUnordEqual: SpvOp_ = 181;
pub const SpvOp__SpvOpFOrdNotEqual: SpvOp_ = 182;
pub const SpvOp__SpvOpFUnordNotEqual: SpvOp_ = 183;
pub const SpvOp__SpvOpFOrdLessThan: SpvOp_ = 184;
pub const SpvOp__SpvOpFUnordLessThan: SpvOp_ = 185;
pub const SpvOp__SpvOpFOrdGreaterThan: SpvOp_ = 186;
pub const SpvOp__SpvOpFUnordGreaterThan: SpvOp_ = 187;
pub const SpvOp__SpvOpFOrdLessThanEqual: SpvOp_ = 188;
pub const SpvOp__SpvOpFUnordLessThanEqual: SpvOp_ = 189;
pub const SpvOp__SpvOpFOrdGreaterThanEqual: SpvOp_ = 190;
pub const SpvOp__SpvOpFUnordGreaterThanEqual: SpvOp_ = 191;
pub const SpvOp__SpvOpShiftRightLogical: SpvOp_ = 194;
pub const SpvOp__SpvOpShiftRightArithmetic: SpvOp_ = 195;
pub const SpvOp__SpvOpShiftLeftLogical: SpvOp_ = 196;
pub const SpvOp__SpvOpBitwiseOr: SpvOp_ = 197;
pub const SpvOp__SpvOpBitwiseXor: SpvOp_ = 198;
pub const SpvOp__SpvOpBitwiseAnd: SpvOp_ = 199;
pub const SpvOp__SpvOpNot: SpvOp_ = 200;
pub const SpvOp__SpvOpBitFieldInsert: SpvOp_ = 201;
pub const SpvOp__SpvOpBitFieldSExtract: SpvOp_ = 202;
pub const SpvOp__SpvOpBitFieldUExtract: SpvOp_ = 203;
pub const SpvOp__SpvOpBitReverse: SpvOp_ = 204;
pub const SpvOp__SpvOpBitCount: SpvOp_ = 205;
pub const SpvOp__SpvOpDPdx: SpvOp_ = 207;
pub const SpvOp__SpvOpDPdy: SpvOp_ = 208;
pub const SpvOp__SpvOpFwidth: SpvOp_ = 209;
pub const SpvOp__SpvOpDPdxFine: SpvOp_ = 210;
pub const SpvOp__SpvOpDPdyFine: SpvOp_ = 211;
pub const SpvOp__SpvOpFwidthFine: SpvOp_ = 212;
pub const SpvOp__SpvOpDPdxCoarse: SpvOp_ = 213;
pub const SpvOp__SpvOpDPdyCoarse: SpvOp_ = 214;
pub const SpvOp__SpvOpFwidthCoarse: SpvOp_ = 215;
pub const SpvOp__SpvOpEmitVertex: SpvOp_ = 218;
pub const SpvOp__SpvOpEndPrimitive: SpvOp_ = 219;
pub const SpvOp__SpvOpEmitStreamVertex: SpvOp_ = 220;
pub const SpvOp__SpvOpEndStreamPrimitive: SpvOp_ = 221;
pub const SpvOp__SpvOpControlBarrier: SpvOp_ = 224;
pub const SpvOp__SpvOpMemoryBarrier: SpvOp_ = 225;
pub const SpvOp__SpvOpAtomicLoad: SpvOp_ = 227;
pub const SpvOp__SpvOpAtomicStore: SpvOp_ = 228;
pub const SpvOp__SpvOpAtomicExchange: SpvOp_ = 229;
pub const SpvOp__SpvOpAtomicCompareExchange: SpvOp_ = 230;
pub const SpvOp__SpvOpAtomicCompareExchangeWeak: SpvOp_ = 231;
pub const SpvOp__SpvOpAtomicIIncrement: SpvOp_ = 232;
pub const SpvOp__SpvOpAtomicIDecrement: SpvOp_ = 233;
pub const SpvOp__SpvOpAtomicIAdd: SpvOp_ = 234;
pub const SpvOp__SpvOpAtomicISub: SpvOp_ = 235;
pub const SpvOp__SpvOpAtomicSMin: SpvOp_ = 236;
pub const SpvOp__SpvOpAtomicUMin: SpvOp_ = 237;
pub const SpvOp__SpvOpAtomicSMax: SpvOp_ = 238;
pub const SpvOp__SpvOpAtomicUMax: SpvOp_ = 239;
pub const SpvOp__SpvOpAtomicAnd: SpvOp_ = 240;
pub const SpvOp__SpvOpAtomicOr: SpvOp_ = 241;
pub const SpvOp__SpvOpAtomicXor: SpvOp_ = 242;
pub const SpvOp__SpvOpPhi: SpvOp_ = 245;
pub const SpvOp__SpvOpLoopMerge: SpvOp_ = 246;
pub const SpvOp__SpvOpSelectionMerge: SpvOp_ = 247;
pub const SpvOp__SpvOpLabel: SpvOp_ = 248;
pub const SpvOp__SpvOpBranch: SpvOp_ = 249;
pub const SpvOp__SpvOpBranchConditional: SpvOp_ = 250;
pub const SpvOp__SpvOpSwitch: SpvOp_ = 251;
pub const SpvOp__SpvOpKill: SpvOp_ = 252;
pub const SpvOp__SpvOpReturn: SpvOp_ = 253;
pub const SpvOp__SpvOpReturnValue: SpvOp_ = 254;
pub const SpvOp__SpvOpUnreachable: SpvOp_ = 255;
pub const SpvOp__SpvOpLifetimeStart: SpvOp_ = 256;
pub const SpvOp__SpvOpLifetimeStop: SpvOp_ = 257;
pub const SpvOp__SpvOpGroupAsyncCopy: SpvOp_ = 259;
pub const SpvOp__SpvOpGroupWaitEvents: SpvOp_ = 260;
pub const SpvOp__SpvOpGroupAll: SpvOp_ = 261;
pub const SpvOp__SpvOpGroupAny: SpvOp_ = 262;
pub const SpvOp__SpvOpGroupBroadcast: SpvOp_ = 263;
pub const SpvOp__SpvOpGroupIAdd: SpvOp_ = 264;
pub const SpvOp__SpvOpGroupFAdd: SpvOp_ = 265;
pub const SpvOp__SpvOpGroupFMin: SpvOp_ = 266;
pub const SpvOp__SpvOpGroupUMin: SpvOp_ = 267;
pub const SpvOp__SpvOpGroupSMin: SpvOp_ = 268;
pub const SpvOp__SpvOpGroupFMax: SpvOp_ = 269;
pub const SpvOp__SpvOpGroupUMax: SpvOp_ = 270;
pub const SpvOp__SpvOpGroupSMax: SpvOp_ = 271;
pub const SpvOp__SpvOpReadPipe: SpvOp_ = 274;
pub const SpvOp__SpvOpWritePipe: SpvOp_ = 275;
pub const SpvOp__SpvOpReservedReadPipe: SpvOp_ = 276;
pub const SpvOp__SpvOpReservedWritePipe: SpvOp_ = 277;
pub const SpvOp__SpvOpReserveReadPipePackets: SpvOp_ = 278;
pub const SpvOp__SpvOpReserveWritePipePackets: SpvOp_ = 279;
pub const SpvOp__SpvOpCommitReadPipe: SpvOp_ = 280;
pub const SpvOp__SpvOpCommitWritePipe: SpvOp_ = 281;
pub const SpvOp__SpvOpIsValidReserveId: SpvOp_ = 282;
pub const SpvOp__SpvOpGetNumPipePackets: SpvOp_ = 283;
pub const SpvOp__SpvOpGetMaxPipePackets: SpvOp_ = 284;
pub const SpvOp__SpvOpGroupReserveReadPipePackets: SpvOp_ = 285;
pub const SpvOp__SpvOpGroupReserveWritePipePackets: SpvOp_ = 286;
pub const SpvOp__SpvOpGroupCommitReadPipe: SpvOp_ = 287;
pub const SpvOp__SpvOpGroupCommitWritePipe: SpvOp_ = 288;
pub const SpvOp__SpvOpEnqueueMarker: SpvOp_ = 291;
pub const SpvOp__SpvOpEnqueueKernel: SpvOp_ = 292;
pub const SpvOp__SpvOpGetKernelNDrangeSubGroupCount: SpvOp_ = 293;
pub const SpvOp__SpvOpGetKernelNDrangeMaxSubGroupSize: SpvOp_ = 294;
pub const SpvOp__SpvOpGetKernelWorkGroupSize: SpvOp_ = 295;
pub const SpvOp__SpvOpGetKernelPreferredWorkGroupSizeMultiple: SpvOp_ = 296;
pub const SpvOp__SpvOpRetainEvent: SpvOp_ = 297;
pub const SpvOp__SpvOpReleaseEvent: SpvOp_ = 298;
pub const SpvOp__SpvOpCreateUserEvent: SpvOp_ = 299;
pub const SpvOp__SpvOpIsValidEvent: SpvOp_ = 300;
pub const SpvOp__SpvOpSetUserEventStatus: SpvOp_ = 301;
pub const SpvOp__SpvOpCaptureEventProfilingInfo: SpvOp_ = 302;
pub const SpvOp__SpvOpGetDefaultQueue: SpvOp_ = 303;
pub const SpvOp__SpvOpBuildNDRange: SpvOp_ = 304;
pub const SpvOp__SpvOpImageSparseSampleImplicitLod: SpvOp_ = 305;
pub const SpvOp__SpvOpImageSparseSampleExplicitLod: SpvOp_ = 306;
pub const SpvOp__SpvOpImageSparseSampleDrefImplicitLod: SpvOp_ = 307;
pub const SpvOp__SpvOpImageSparseSampleDrefExplicitLod: SpvOp_ = 308;
pub const SpvOp__SpvOpImageSparseSampleProjImplicitLod: SpvOp_ = 309;
pub const SpvOp__SpvOpImageSparseSampleProjExplicitLod: SpvOp_ = 310;
pub const SpvOp__SpvOpImageSparseSampleProjDrefImplicitLod: SpvOp_ = 311;
pub const SpvOp__SpvOpImageSparseSampleProjDrefExplicitLod: SpvOp_ = 312;
pub const SpvOp__SpvOpImageSparseFetch: SpvOp_ = 313;
pub const SpvOp__SpvOpImageSparseGather: SpvOp_ = 314;
pub const SpvOp__SpvOpImageSparseDrefGather: SpvOp_ = 315;
pub const SpvOp__SpvOpImageSparseTexelsResident: SpvOp_ = 316;
pub const SpvOp__SpvOpNoLine: SpvOp_ = 317;
pub const SpvOp__SpvOpAtomicFlagTestAndSet: SpvOp_ = 318;
pub const SpvOp__SpvOpAtomicFlagClear: SpvOp_ = 319;
pub const SpvOp__SpvOpImageSparseRead: SpvOp_ = 320;
pub const SpvOp__SpvOpSizeOf: SpvOp_ = 321;
pub const SpvOp__SpvOpTypePipeStorage: SpvOp_ = 322;
pub const SpvOp__SpvOpConstantPipeStorage: SpvOp_ = 323;
pub const SpvOp__SpvOpCreatePipeFromPipeStorage: SpvOp_ = 324;
pub const SpvOp__SpvOpGetKernelLocalSizeForSubgroupCount: SpvOp_ = 325;
pub const SpvOp__SpvOpGetKernelMaxNumSubgroups: SpvOp_ = 326;
pub const SpvOp__SpvOpTypeNamedBarrier: SpvOp_ = 327;
pub const SpvOp__SpvOpNamedBarrierInitialize: SpvOp_ = 328;
pub const SpvOp__SpvOpMemoryNamedBarrier: SpvOp_ = 329;
pub const SpvOp__SpvOpModuleProcessed: SpvOp_ = 330;
pub const SpvOp__SpvOpExecutionModeId: SpvOp_ = 331;
pub const SpvOp__SpvOpDecorateId: SpvOp_ = 332;
pub const SpvOp__SpvOpGroupNonUniformElect: SpvOp_ = 333;
pub const SpvOp__SpvOpGroupNonUniformAll: SpvOp_ = 334;
pub const SpvOp__SpvOpGroupNonUniformAny: SpvOp_ = 335;
pub const SpvOp__SpvOpGroupNonUniformAllEqual: SpvOp_ = 336;
pub const SpvOp__SpvOpGroupNonUniformBroadcast: SpvOp_ = 337;
pub const SpvOp__SpvOpGroupNonUniformBroadcastFirst: SpvOp_ = 338;
pub const SpvOp__SpvOpGroupNonUniformBallot: SpvOp_ = 339;
pub const SpvOp__SpvOpGroupNonUniformInverseBallot: SpvOp_ = 340;
pub const SpvOp__SpvOpGroupNonUniformBallotBitExtract: SpvOp_ = 341;
pub const SpvOp__SpvOpGroupNonUniformBallotBitCount: SpvOp_ = 342;
pub const SpvOp__SpvOpGroupNonUniformBallotFindLSB: SpvOp_ = 343;
pub const SpvOp__SpvOpGroupNonUniformBallotFindMSB: SpvOp_ = 344;
pub const SpvOp__SpvOpGroupNonUniformShuffle: SpvOp_ = 345;
pub const SpvOp__SpvOpGroupNonUniformShuffleXor: SpvOp_ = 346;
pub const SpvOp__SpvOpGroupNonUniformShuffleUp: SpvOp_ = 347;
pub const SpvOp__SpvOpGroupNonUniformShuffleDown: SpvOp_ = 348;
pub const SpvOp__SpvOpGroupNonUniformIAdd: SpvOp_ = 349;
pub const SpvOp__SpvOpGroupNonUniformFAdd: SpvOp_ = 350;
pub const SpvOp__SpvOpGroupNonUniformIMul: SpvOp_ = 351;
pub const SpvOp__SpvOpGroupNonUniformFMul: SpvOp_ = 352;
pub const SpvOp__SpvOpGroupNonUniformSMin: SpvOp_ = 353;
pub const SpvOp__SpvOpGroupNonUniformUMin: SpvOp_ = 354;
pub const SpvOp__SpvOpGroupNonUniformFMin: SpvOp_ = 355;
pub const SpvOp__SpvOpGroupNonUniformSMax: SpvOp_ = 356;
pub const SpvOp__SpvOpGroupNonUniformUMax: SpvOp_ = 357;
pub const SpvOp__SpvOpGroupNonUniformFMax: SpvOp_ = 358;
pub const SpvOp__SpvOpGroupNonUniformBitwiseAnd: SpvOp_ = 359;
pub const SpvOp__SpvOpGroupNonUniformBitwiseOr: SpvOp_ = 360;
pub const SpvOp__SpvOpGroupNonUniformBitwiseXor: SpvOp_ = 361;
pub const SpvOp__SpvOpGroupNonUniformLogicalAnd: SpvOp_ = 362;
pub const SpvOp__SpvOpGroupNonUniformLogicalOr: SpvOp_ = 363;
pub const SpvOp__SpvOpGroupNonUniformLogicalXor: SpvOp_ = 364;
pub const SpvOp__SpvOpGroupNonUniformQuadBroadcast: SpvOp_ = 365;
pub const SpvOp__SpvOpGroupNonUniformQuadSwap: SpvOp_ = 366;
pub const SpvOp__SpvOpSubgroupBallotKHR: SpvOp_ = 4421;
pub const SpvOp__SpvOpSubgroupFirstInvocationKHR: SpvOp_ = 4422;
pub const SpvOp__SpvOpSubgroupAllKHR: SpvOp_ = 4428;
pub const SpvOp__SpvOpSubgroupAnyKHR: SpvOp_ = 4429;
pub const SpvOp__SpvOpSubgroupAllEqualKHR: SpvOp_ = 4430;
pub const SpvOp__SpvOpSubgroupReadInvocationKHR: SpvOp_ = 4432;
pub const SpvOp__SpvOpGroupIAddNonUniformAMD: SpvOp_ = 5000;
pub const SpvOp__SpvOpGroupFAddNonUniformAMD: SpvOp_ = 5001;
pub const SpvOp__SpvOpGroupFMinNonUniformAMD: SpvOp_ = 5002;
pub const SpvOp__SpvOpGroupUMinNonUniformAMD: SpvOp_ = 5003;
pub const SpvOp__SpvOpGroupSMinNonUniformAMD: SpvOp_ = 5004;
pub const SpvOp__SpvOpGroupFMaxNonUniformAMD: SpvOp_ = 5005;
pub const SpvOp__SpvOpGroupUMaxNonUniformAMD: SpvOp_ = 5006;
pub const SpvOp__SpvOpGroupSMaxNonUniformAMD: SpvOp_ = 5007;
pub const SpvOp__SpvOpFragmentMaskFetchAMD: SpvOp_ = 5011;
pub const SpvOp__SpvOpFragmentFetchAMD: SpvOp_ = 5012;
pub const SpvOp__SpvOpImageSampleFootprintNV: SpvOp_ = 5283;
pub const SpvOp__SpvOpGroupNonUniformPartitionNV: SpvOp_ = 5296;
pub const SpvOp__SpvOpWritePackedPrimitiveIndices4x8NV: SpvOp_ = 5299;
pub const SpvOp__SpvOpReportIntersectionNV: SpvOp_ = 5334;
pub const SpvOp__SpvOpIgnoreIntersectionNV: SpvOp_ = 5335;
pub const SpvOp__SpvOpTerminateRayNV: SpvOp_ = 5336;
pub const SpvOp__SpvOpTraceNV: SpvOp_ = 5337;
pub const SpvOp__SpvOpTypeAccelerationStructureNV: SpvOp_ = 5341;
pub const SpvOp__SpvOpExecuteCallableNV: SpvOp_ = 5344;
pub const SpvOp__SpvOpSubgroupShuffleINTEL: SpvOp_ = 5571;
pub const SpvOp__SpvOpSubgroupShuffleDownINTEL: SpvOp_ = 5572;
pub const SpvOp__SpvOpSubgroupShuffleUpINTEL: SpvOp_ = 5573;
pub const SpvOp__SpvOpSubgroupShuffleXorINTEL: SpvOp_ = 5574;
pub const SpvOp__SpvOpSubgroupBlockReadINTEL: SpvOp_ = 5575;
pub const SpvOp__SpvOpSubgroupBlockWriteINTEL: SpvOp_ = 5576;
pub const SpvOp__SpvOpSubgroupImageBlockReadINTEL: SpvOp_ = 5577;
pub const SpvOp__SpvOpSubgroupImageBlockWriteINTEL: SpvOp_ = 5578;
pub const SpvOp__SpvOpDecorateStringGOOGLE: SpvOp_ = 5632;
pub const SpvOp__SpvOpMemberDecorateStringGOOGLE: SpvOp_ = 5633;
pub const SpvOp__SpvOpMax: SpvOp_ = 2147483647;
pub type SpvOp_ = i32;
pub use self::SpvOp_ as SpvOp;
pub const SpvReflectResult_SPV_REFLECT_RESULT_SUCCESS: SpvReflectResult = 0;
pub const SpvReflectResult_SPV_REFLECT_RESULT_NOT_READY: SpvReflectResult = 1;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_PARSE_FAILED: SpvReflectResult = 2;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_ALLOC_FAILED: SpvReflectResult = 3;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_RANGE_EXCEEDED: SpvReflectResult = 4;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_NULL_POINTER: SpvReflectResult = 5;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_INTERNAL_ERROR: SpvReflectResult = 6;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_COUNT_MISMATCH: SpvReflectResult = 7;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_ELEMENT_NOT_FOUND: SpvReflectResult = 8;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_CODE_SIZE: SpvReflectResult = 9;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_MAGIC_NUMBER: SpvReflectResult =
    10;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_EOF: SpvReflectResult = 11;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ID_REFERENCE: SpvReflectResult =
    12;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_SPIRV_SET_NUMBER_OVERFLOW: SpvReflectResult =
    13;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_STORAGE_CLASS: SpvReflectResult =
    14;
pub const SpvReflectResult_SPV_REFLECT_RESULT_ERROR_SPIRV_RECURSION: SpvReflectResult = 15;
#[doc = " @enum SpvReflectResult"]
pub type SpvReflectResult = i32;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_UNDEFINED: SpvReflectTypeFlagBits = 0;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_VOID: SpvReflectTypeFlagBits = 1;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_BOOL: SpvReflectTypeFlagBits = 2;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_INT: SpvReflectTypeFlagBits = 4;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_FLOAT: SpvReflectTypeFlagBits = 8;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_VECTOR: SpvReflectTypeFlagBits = 256;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_MATRIX: SpvReflectTypeFlagBits = 512;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_EXTERNAL_IMAGE: SpvReflectTypeFlagBits =
    65536;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_EXTERNAL_SAMPLER: SpvReflectTypeFlagBits =
    131072;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_EXTERNAL_SAMPLED_IMAGE:
    SpvReflectTypeFlagBits = 262144;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_EXTERNAL_BLOCK: SpvReflectTypeFlagBits =
    524288;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_EXTERNAL_ACCELERATION_STRUCTURE_NV:
    SpvReflectTypeFlagBits = 1048576;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_EXTERNAL_MASK: SpvReflectTypeFlagBits =
    2031616;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_STRUCT: SpvReflectTypeFlagBits = 268435456;
pub const SpvReflectTypeFlagBits_SPV_REFLECT_TYPE_FLAG_ARRAY: SpvReflectTypeFlagBits = 536870912;
#[doc = " @enum SpvReflectTypeFlagBits"]
pub type SpvReflectTypeFlagBits = i32;
pub type SpvReflectTypeFlags = u32;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_NONE: SpvReflectDecorationFlagBits =
    0;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_BLOCK: SpvReflectDecorationFlagBits =
    1;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_BUFFER_BLOCK:
    SpvReflectDecorationFlagBits = 2;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_ROW_MAJOR:
    SpvReflectDecorationFlagBits = 4;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_COLUMN_MAJOR:
    SpvReflectDecorationFlagBits = 8;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_BUILT_IN:
    SpvReflectDecorationFlagBits = 16;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_NOPERSPECTIVE:
    SpvReflectDecorationFlagBits = 32;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_FLAT: SpvReflectDecorationFlagBits =
    64;
pub const SpvReflectDecorationFlagBits_SPV_REFLECT_DECORATION_NON_WRITABLE:
    SpvReflectDecorationFlagBits = 128;
#[doc = " @enum SpvReflectDecorationBits"]
pub type SpvReflectDecorationFlagBits = i32;
pub type SpvReflectDecorationFlags = u32;
pub const SpvReflectResourceType_SPV_REFLECT_RESOURCE_FLAG_UNDEFINED: SpvReflectResourceType = 0;
pub const SpvReflectResourceType_SPV_REFLECT_RESOURCE_FLAG_SAMPLER: SpvReflectResourceType = 1;
pub const SpvReflectResourceType_SPV_REFLECT_RESOURCE_FLAG_CBV: SpvReflectResourceType = 2;
pub const SpvReflectResourceType_SPV_REFLECT_RESOURCE_FLAG_SRV: SpvReflectResourceType = 4;
pub const SpvReflectResourceType_SPV_REFLECT_RESOURCE_FLAG_UAV: SpvReflectResourceType = 8;
#[doc = " @enum SpvReflectResourceType"]
pub type SpvReflectResourceType = i32;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_UNDEFINED: SpvReflectFormat = 0;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32_UINT: SpvReflectFormat = 98;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32_SINT: SpvReflectFormat = 99;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32_SFLOAT: SpvReflectFormat = 100;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32_UINT: SpvReflectFormat = 101;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32_SINT: SpvReflectFormat = 102;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32_SFLOAT: SpvReflectFormat = 103;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32B32_UINT: SpvReflectFormat = 104;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32B32_SINT: SpvReflectFormat = 105;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32B32_SFLOAT: SpvReflectFormat = 106;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32B32A32_UINT: SpvReflectFormat = 107;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32B32A32_SINT: SpvReflectFormat = 108;
pub const SpvReflectFormat_SPV_REFLECT_FORMAT_R32G32B32A32_SFLOAT: SpvReflectFormat = 109;
#[doc = " @enum SpvReflectFormat"]
pub type SpvReflectFormat = i32;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLER: SpvReflectDescriptorType =
    0;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER:
    SpvReflectDescriptorType = 1;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_SAMPLED_IMAGE:
    SpvReflectDescriptorType = 2;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_IMAGE:
    SpvReflectDescriptorType = 3;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER:
    SpvReflectDescriptorType = 4;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER:
    SpvReflectDescriptorType = 5;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER:
    SpvReflectDescriptorType = 6;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER:
    SpvReflectDescriptorType = 7;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC:
    SpvReflectDescriptorType = 8;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC:
    SpvReflectDescriptorType = 9;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_INPUT_ATTACHMENT:
    SpvReflectDescriptorType = 10;
pub const SpvReflectDescriptorType_SPV_REFLECT_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV:
    SpvReflectDescriptorType = 1000165000;
#[doc = " @enum SpvReflectDescriptorType"]
pub type SpvReflectDescriptorType = i32;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_VERTEX_BIT:
    SpvReflectShaderStageFlagBits = 1;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_TESSELLATION_CONTROL_BIT:
    SpvReflectShaderStageFlagBits = 2;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_TESSELLATION_EVALUATION_BIT:
    SpvReflectShaderStageFlagBits = 4;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_GEOMETRY_BIT:
    SpvReflectShaderStageFlagBits = 8;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_FRAGMENT_BIT:
    SpvReflectShaderStageFlagBits = 16;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_COMPUTE_BIT:
    SpvReflectShaderStageFlagBits = 32;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_RAYGEN_BIT_NV:
    SpvReflectShaderStageFlagBits = 256;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_ANY_HIT_BIT_NV:
    SpvReflectShaderStageFlagBits = 512;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_CLOSEST_HIT_BIT_NV:
    SpvReflectShaderStageFlagBits = 1024;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_MISS_BIT_NV:
    SpvReflectShaderStageFlagBits = 2048;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_INTERSECTION_BIT_NV:
    SpvReflectShaderStageFlagBits = 4096;
pub const SpvReflectShaderStageFlagBits_SPV_REFLECT_SHADER_STAGE_CALLABLE_BIT_NV:
    SpvReflectShaderStageFlagBits = 8192;
#[doc = " @enum SpvReflectShaderStageFlagBits"]
pub type SpvReflectShaderStageFlagBits = i32;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_KHRONOS_LLVM_SPIRV_TRANSLATOR:
    SpvReflectGenerator = 6;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_KHRONOS_SPIRV_TOOLS_ASSEMBLER:
    SpvReflectGenerator = 7;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_KHRONOS_GLSLANG_REFERENCE_FRONT_END:
    SpvReflectGenerator = 8;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_GOOGLE_SHADERC_OVER_GLSLANG:
    SpvReflectGenerator = 13;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_GOOGLE_SPIREGG: SpvReflectGenerator = 14;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_GOOGLE_RSPIRV: SpvReflectGenerator = 15;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_X_LEGEND_MESA_MESAIR_SPIRV_TRANSLATOR:
    SpvReflectGenerator = 16;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_KHRONOS_SPIRV_TOOLS_LINKER:
    SpvReflectGenerator = 17;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_WINE_VKD3D_SHADER_COMPILER:
    SpvReflectGenerator = 18;
pub const SpvReflectGenerator_SPV_REFLECT_GENERATOR_CLAY_CLAY_SHADER_COMPILER: SpvReflectGenerator =
    19;
#[doc = " @enum SpvReflectGenerator"]
pub type SpvReflectGenerator = i32;
pub const SPV_REFLECT_MAX_ARRAY_DIMS: _bindgen_ty_1 = 32;
pub const SPV_REFLECT_MAX_DESCRIPTOR_SETS: _bindgen_ty_1 = 64;
pub type _bindgen_ty_1 = i32;
pub const SPV_REFLECT_BINDING_NUMBER_DONT_CHANGE: _bindgen_ty_2 = -1;
pub const SPV_REFLECT_SET_NUMBER_DONT_CHANGE: _bindgen_ty_2 = -1;
pub type _bindgen_ty_2 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectNumericTraits {
    pub scalar: SpvReflectNumericTraits_Scalar,
    pub vector: SpvReflectNumericTraits_Vector,
    pub matrix: SpvReflectNumericTraits_Matrix,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectNumericTraits_Scalar {
    pub width: u32,
    pub signedness: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectNumericTraits_Vector {
    pub component_count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectNumericTraits_Matrix {
    pub column_count: u32,
    pub row_count: u32,
    pub stride: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectImageTraits {
    pub dim: SpvDim,
    pub depth: u32,
    pub arrayed: u32,
    pub ms: u32,
    pub sampled: u32,
    pub image_format: SpvImageFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectArrayTraits {
    pub dims_count: u32,
    pub dims: [u32; 32usize],
    pub stride: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectBindingArrayTraits {
    pub dims_count: u32,
    pub dims: [u32; 32usize],
}
#[doc = " @struct SpvReflectTypeDescription"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectTypeDescription {
    pub id: u32,
    pub op: SpvOp,
    pub type_name: *const ::std::os::raw::c_char,
    pub struct_member_name: *const ::std::os::raw::c_char,
    pub storage_class: SpvStorageClass,
    pub type_flags: SpvReflectTypeFlags,
    pub decoration_flags: SpvReflectDecorationFlags,
    pub traits: SpvReflectTypeDescription_Traits,
    pub member_count: u32,
    pub members: *mut SpvReflectTypeDescription,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectTypeDescription_Traits {
    pub numeric: SpvReflectNumericTraits,
    pub image: SpvReflectImageTraits,
    pub array: SpvReflectArrayTraits,
}
#[doc = " @struct SpvReflectInterfaceVariable"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectInterfaceVariable {
    pub spirv_id: u32,
    pub name: *const ::std::os::raw::c_char,
    pub location: u32,
    pub storage_class: SpvStorageClass,
    pub semantic: *const ::std::os::raw::c_char,
    pub decoration_flags: SpvReflectDecorationFlags,
    pub built_in: SpvBuiltIn,
    pub numeric: SpvReflectNumericTraits,
    pub array: SpvReflectArrayTraits,
    pub member_count: u32,
    pub members: *mut SpvReflectInterfaceVariable,
    pub format: SpvReflectFormat,
    pub type_description: *mut SpvReflectTypeDescription,
    pub word_offset: SpvReflectInterfaceVariable__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectInterfaceVariable__bindgen_ty_1 {
    pub location: u32,
}
#[doc = " @struct SpvReflectBlockVariable"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectBlockVariable {
    pub spirv_id: u32,
    pub name: *const ::std::os::raw::c_char,
    pub offset: u32,
    pub absolute_offset: u32,
    pub size: u32,
    pub padded_size: u32,
    pub decoration_flags: SpvReflectDecorationFlags,
    pub numeric: SpvReflectNumericTraits,
    pub array: SpvReflectArrayTraits,
    pub member_count: u32,
    pub members: *mut SpvReflectBlockVariable,
    pub type_description: *mut SpvReflectTypeDescription,
}
#[doc = " @struct SpvReflectDescriptorBinding"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectDescriptorBinding {
    pub spirv_id: u32,
    pub name: *const ::std::os::raw::c_char,
    pub binding: u32,
    pub input_attachment_index: u32,
    pub set: u32,
    pub descriptor_type: SpvReflectDescriptorType,
    pub resource_type: SpvReflectResourceType,
    pub image: SpvReflectImageTraits,
    pub block: SpvReflectBlockVariable,
    pub array: SpvReflectBindingArrayTraits,
    pub count: u32,
    pub accessed: u32,
    pub uav_counter_id: u32,
    pub uav_counter_binding: *mut SpvReflectDescriptorBinding,
    pub type_description: *mut SpvReflectTypeDescription,
    pub word_offset: SpvReflectDescriptorBinding__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectDescriptorBinding__bindgen_ty_1 {
    pub binding: u32,
    pub set: u32,
}
#[doc = " @struct SpvReflectDescriptorSet"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectDescriptorSet {
    pub set: u32,
    pub binding_count: u32,
    pub bindings: *mut *mut SpvReflectDescriptorBinding,
}
#[doc = " @struct SpvReflectEntryPoint"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectEntryPoint {
    pub name: *const ::std::os::raw::c_char,
    pub id: u32,
    pub spirv_execution_model: SpvExecutionModel,
    pub shader_stage: SpvReflectShaderStageFlagBits,
    pub input_variable_count: u32,
    pub input_variables: *mut SpvReflectInterfaceVariable,
    pub output_variable_count: u32,
    pub output_variables: *mut SpvReflectInterfaceVariable,
    pub descriptor_set_count: u32,
    pub descriptor_sets: *mut SpvReflectDescriptorSet,
    pub used_uniform_count: u32,
    pub used_uniforms: *mut u32,
    pub used_push_constant_count: u32,
    pub used_push_constants: *mut u32,
}
#[doc = " @struct SpvReflectShaderModule"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SpvReflectShaderModule {
    pub generator: SpvReflectGenerator,
    pub entry_point_name: *const ::std::os::raw::c_char,
    pub entry_point_id: u32,
    pub entry_point_count: u32,
    pub entry_points: *mut SpvReflectEntryPoint,
    pub source_language: SpvSourceLanguage,
    pub source_language_version: u32,
    pub source_file: *const ::std::os::raw::c_char,
    pub source_source: *const ::std::os::raw::c_char,
    pub spirv_execution_model: SpvExecutionModel,
    pub shader_stage: SpvReflectShaderStageFlagBits,
    pub descriptor_binding_count: u32,
    pub descriptor_bindings: *mut SpvReflectDescriptorBinding,
    pub descriptor_set_count: u32,
    pub descriptor_sets: [SpvReflectDescriptorSet; 64usize],
    pub input_variable_count: u32,
    pub input_variables: *mut SpvReflectInterfaceVariable,
    pub output_variable_count: u32,
    pub output_variables: *mut SpvReflectInterfaceVariable,
    pub push_constant_block_count: u32,
    pub push_constant_blocks: *mut SpvReflectBlockVariable,
    pub _internal: *mut SpvReflectShaderModule_Internal,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpvReflectShaderModule_Internal {
    pub spirv_size: usize,
    pub spirv_code: *mut u32,
    pub spirv_word_count: u32,
    pub type_description_count: usize,
    pub type_descriptions: *mut SpvReflectTypeDescription,
}
extern "C" {
    #[doc = " @fn spvReflectCreateShaderModule"]
    #[doc = ""]
    #[doc = "@param  size      Size in bytes of SPIR-V code."]
    #[doc = "@param  p_code    Pointer to SPIR-V code."]
    #[doc = "@param  p_module  Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@return           SPV_REFLECT_RESULT_SUCCESS on success."]
    pub fn spvReflectCreateShaderModule(
        size: usize,
        p_code: *const ::std::os::raw::c_void,
        p_module: *mut SpvReflectShaderModule,
    ) -> SpvReflectResult;
}
extern "C" {
    pub fn spvReflectGetShaderModule(
        size: usize,
        p_code: *const ::std::os::raw::c_void,
        p_module: *mut SpvReflectShaderModule,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectDestroyShaderModule"]
    #[doc = ""]
    #[doc = "@param  p_module  Pointer to an instance of SpvReflectShaderModule."]
    pub fn spvReflectDestroyShaderModule(p_module: *mut SpvReflectShaderModule);
}
extern "C" {
    #[doc = " @fn spvReflectGetCodeSize"]
    #[doc = ""]
    #[doc = "@param  p_module  Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@return           Returns the size of the SPIR-V in bytes"]
    pub fn spvReflectGetCodeSize(p_module: *const SpvReflectShaderModule) -> u32;
}
extern "C" {
    #[doc = " @fn spvReflectGetCode"]
    #[doc = ""]
    #[doc = "@param  p_module  Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@return           Returns a const pointer to the compiled SPIR-V bytecode."]
    pub fn spvReflectGetCode(p_module: *const SpvReflectShaderModule) -> *const u32;
}
extern "C" {
    #[doc = " @fn spvReflectGetEntryPoint"]
    #[doc = ""]
    #[doc = "@param  p_module     Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  entry_point  Name of the requested entry point."]
    #[doc = "@return              Returns a const pointer to the requested entry point,"]
    #[doc = "or NULL if it\'s not found."]
    pub fn spvReflectGetEntryPoint(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
    ) -> *const SpvReflectEntryPoint;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateDescriptorBindings"]
    #[doc = ""]
    #[doc = "@param  p_module     Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_count      If pp_bindings is NULL, the module\'s descriptor binding"]
    #[doc = "count (across all descriptor sets) will be stored here."]
    #[doc = "If pp_bindings is not NULL, *p_count must contain the"]
    #[doc = "module\'s descriptor binding count."]
    #[doc = "@param  pp_bindings  If NULL, the module\'s total descriptor binding count"]
    #[doc = "will be written to *p_count."]
    #[doc = "If non-NULL, pp_bindings must point to an array with"]
    #[doc = "p_count entries, where pointers to the module\'s"]
    #[doc = "descriptor bindings will be written. The caller must not"]
    #[doc = "free the binding pointers written to this array."]
    #[doc = "@return              If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateDescriptorBindings(
        p_module: *const SpvReflectShaderModule,
        p_count: *mut u32,
        pp_bindings: *mut *mut SpvReflectDescriptorBinding,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateEntryPointDescriptorBindings"]
    #[doc = "@brief  Creates a listing of all descriptor bindings that are used in the"]
    #[doc = "static call tree of the given entry point."]
    #[doc = "@param  p_module     Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  entry_point  The name of the entry point to get the descriptor bindings for."]
    #[doc = "@param  p_count      If pp_bindings is NULL, the entry point\'s descriptor binding"]
    #[doc = "count (across all descriptor sets) will be stored here."]
    #[doc = "If pp_bindings is not NULL, *p_count must contain the"]
    #[doc = "entry points\'s descriptor binding count."]
    #[doc = "@param  pp_bindings  If NULL, the entry point\'s total descriptor binding count"]
    #[doc = "will be written to *p_count."]
    #[doc = "If non-NULL, pp_bindings must point to an array with"]
    #[doc = "p_count entries, where pointers to the entry point\'s"]
    #[doc = "descriptor bindings will be written. The caller must not"]
    #[doc = "free the binding pointers written to this array."]
    #[doc = "@return              If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateEntryPointDescriptorBindings(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        p_count: *mut u32,
        pp_bindings: *mut *mut SpvReflectDescriptorBinding,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateDescriptorSets"]
    #[doc = ""]
    #[doc = "@param  p_module  Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_count   If pp_sets is NULL, the module\'s descriptor set"]
    #[doc = "count will be stored here."]
    #[doc = "If pp_sets is not NULL, *p_count must contain the"]
    #[doc = "module\'s descriptor set count."]
    #[doc = "@param  pp_sets   If NULL, the module\'s total descriptor set count"]
    #[doc = "will be written to *p_count."]
    #[doc = "If non-NULL, pp_sets must point to an array with"]
    #[doc = "p_count entries, where pointers to the module\'s"]
    #[doc = "descriptor sets will be written. The caller must not"]
    #[doc = "free the descriptor set pointers written to this array."]
    #[doc = "@return           If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateDescriptorSets(
        p_module: *const SpvReflectShaderModule,
        p_count: *mut u32,
        pp_sets: *mut *mut SpvReflectDescriptorSet,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateEntryPointDescriptorSets"]
    #[doc = "@brief  Creates a listing of all descriptor sets and their bindings that are"]
    #[doc = "used in the static call tree of a given entry point."]
    #[doc = "@param  p_module    Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  entry_point The name of the entry point to get the descriptor bindings for."]
    #[doc = "@param  p_count     If pp_sets is NULL, the module\'s descriptor set"]
    #[doc = "count will be stored here."]
    #[doc = "If pp_sets is not NULL, *p_count must contain the"]
    #[doc = "module\'s descriptor set count."]
    #[doc = "@param  pp_sets     If NULL, the module\'s total descriptor set count"]
    #[doc = "will be written to *p_count."]
    #[doc = "If non-NULL, pp_sets must point to an array with"]
    #[doc = "p_count entries, where pointers to the module\'s"]
    #[doc = "descriptor sets will be written. The caller must not"]
    #[doc = "free the descriptor set pointers written to this array."]
    #[doc = "@return             If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateEntryPointDescriptorSets(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        p_count: *mut u32,
        pp_sets: *mut *mut SpvReflectDescriptorSet,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateInputVariables"]
    #[doc = "@brief  If the module contains multiple entry points, this will only get"]
    #[doc = "the input variables for the first one."]
    #[doc = "@param  p_module      Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_count       If pp_variables is NULL, the module\'s input variable"]
    #[doc = "count will be stored here."]
    #[doc = "If pp_variables is not NULL, *p_count must contain"]
    #[doc = "the module\'s input variable count."]
    #[doc = "@param  pp_variables  If NULL, the module\'s input variable count will be"]
    #[doc = "written to *p_count."]
    #[doc = "If non-NULL, pp_variables must point to an array with"]
    #[doc = "p_count entries, where pointers to the module\'s"]
    #[doc = "input variables will be written. The caller must not"]
    #[doc = "free the interface variables written to this array."]
    #[doc = "@return               If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateInputVariables(
        p_module: *const SpvReflectShaderModule,
        p_count: *mut u32,
        pp_variables: *mut *mut SpvReflectInterfaceVariable,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateEntryPointInputVariables"]
    #[doc = "@brief  Enumerate the input variables for a given entry point."]
    #[doc = "@param  entry_point The name of the entry point to get the input variables for."]
    #[doc = "@param  p_module      Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_count       If pp_variables is NULL, the entry point\'s input variable"]
    #[doc = "count will be stored here."]
    #[doc = "If pp_variables is not NULL, *p_count must contain"]
    #[doc = "the entry point\'s input variable count."]
    #[doc = "@param  pp_variables  If NULL, the entry point\'s input variable count will be"]
    #[doc = "written to *p_count."]
    #[doc = "If non-NULL, pp_variables must point to an array with"]
    #[doc = "p_count entries, where pointers to the entry point\'s"]
    #[doc = "input variables will be written. The caller must not"]
    #[doc = "free the interface variables written to this array."]
    #[doc = "@return               If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateEntryPointInputVariables(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        p_count: *mut u32,
        pp_variables: *mut *mut SpvReflectInterfaceVariable,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateOutputVariables"]
    #[doc = "@brief  Note: If the module contains multiple entry points, this will only get"]
    #[doc = "the output variables for the first one."]
    #[doc = "@param  p_module      Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_count       If pp_variables is NULL, the module\'s output variable"]
    #[doc = "count will be stored here."]
    #[doc = "If pp_variables is not NULL, *p_count must contain"]
    #[doc = "the module\'s output variable count."]
    #[doc = "@param  pp_variables  If NULL, the module\'s output variable count will be"]
    #[doc = "written to *p_count."]
    #[doc = "If non-NULL, pp_variables must point to an array with"]
    #[doc = "p_count entries, where pointers to the module\'s"]
    #[doc = "output variables will be written. The caller must not"]
    #[doc = "free the interface variables written to this array."]
    #[doc = "@return               If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateOutputVariables(
        p_module: *const SpvReflectShaderModule,
        p_count: *mut u32,
        pp_variables: *mut *mut SpvReflectInterfaceVariable,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateEntryPointOutputVariables"]
    #[doc = "@brief  Enumerate the output variables for a given entry point."]
    #[doc = "@param  p_module      Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  entry_point   The name of the entry point to get the output variables for."]
    #[doc = "@param  p_count       If pp_variables is NULL, the entry point\'s output variable"]
    #[doc = "count will be stored here."]
    #[doc = "If pp_variables is not NULL, *p_count must contain"]
    #[doc = "the entry point\'s output variable count."]
    #[doc = "@param  pp_variables  If NULL, the entry point\'s output variable count will be"]
    #[doc = "written to *p_count."]
    #[doc = "If non-NULL, pp_variables must point to an array with"]
    #[doc = "p_count entries, where pointers to the entry point\'s"]
    #[doc = "output variables will be written. The caller must not"]
    #[doc = "free the interface variables written to this array."]
    #[doc = "@return               If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateEntryPointOutputVariables(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        p_count: *mut u32,
        pp_variables: *mut *mut SpvReflectInterfaceVariable,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumeratePushConstantBlocks"]
    #[doc = "@brief  Note: If the module contains multiple entry points, this will only get"]
    #[doc = "the push constant blocks for the first one."]
    #[doc = "@param  p_module   Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_count    If pp_blocks is NULL, the module\'s push constant"]
    #[doc = "block count will be stored here."]
    #[doc = "If pp_blocks is not NULL, *p_count must"]
    #[doc = "contain the module\'s push constant block count."]
    #[doc = "@param  pp_blocks  If NULL, the module\'s push constant block count"]
    #[doc = "will be written to *p_count."]
    #[doc = "If non-NULL, pp_blocks must point to an"]
    #[doc = "array with *p_count entries, where pointers to"]
    #[doc = "the module\'s push constant blocks will be written."]
    #[doc = "The caller must not free the block variables written"]
    #[doc = "to this array."]
    #[doc = "@return            If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumeratePushConstantBlocks(
        p_module: *const SpvReflectShaderModule,
        p_count: *mut u32,
        pp_blocks: *mut *mut SpvReflectBlockVariable,
    ) -> SpvReflectResult;
}
extern "C" {
    pub fn spvReflectEnumeratePushConstants(
        p_module: *const SpvReflectShaderModule,
        p_count: *mut u32,
        pp_blocks: *mut *mut SpvReflectBlockVariable,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectEnumerateEntryPointPushConstantBlocks"]
    #[doc = "@brief  Enumerate the push constant blocks used in the static call tree of a"]
    #[doc = "given entry point."]
    #[doc = "@param  p_module   Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_count    If pp_blocks is NULL, the entry point\'s push constant"]
    #[doc = "block count will be stored here."]
    #[doc = "If pp_blocks is not NULL, *p_count must"]
    #[doc = "contain the entry point\'s push constant block count."]
    #[doc = "@param  pp_blocks  If NULL, the entry point\'s push constant block count"]
    #[doc = "will be written to *p_count."]
    #[doc = "If non-NULL, pp_blocks must point to an"]
    #[doc = "array with *p_count entries, where pointers to"]
    #[doc = "the entry point\'s push constant blocks will be written."]
    #[doc = "The caller must not free the block variables written"]
    #[doc = "to this array."]
    #[doc = "@return            If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of the"]
    #[doc = "failure."]
    pub fn spvReflectEnumerateEntryPointPushConstantBlocks(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        p_count: *mut u32,
        pp_blocks: *mut *mut SpvReflectBlockVariable,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectGetDescriptorBinding"]
    #[doc = ""]
    #[doc = "@param  p_module        Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  binding_number  The \"binding\" value of the requested descriptor"]
    #[doc = "binding."]
    #[doc = "@param  set_number      The \"set\" value of the requested descriptor binding."]
    #[doc = "@param  p_result        If successful, SPV_REFLECT_RESULT_SUCCESS will be"]
    #[doc = "written to *p_result. Otherwise, a error code"]
    #[doc = "indicating the cause of the failure will be stored"]
    #[doc = "here."]
    #[doc = "@return                 If the module contains a descriptor binding that"]
    #[doc = "matches the provided [binding_number, set_number]"]
    #[doc = "values, a pointer to that binding is returned. The"]
    #[doc = "caller must not free this pointer."]
    #[doc = "If no match can be found, or if an unrelated error"]
    #[doc = "occurs, the return value will be NULL. Detailed"]
    #[doc = "error results are written to *pResult."]
    #[doc = "@note                    If the module contains multiple desriptor bindings"]
    #[doc = "with the same set and binding numbers, there are"]
    #[doc = "no guarantees about which binding will be returned."]
    pub fn spvReflectGetDescriptorBinding(
        p_module: *const SpvReflectShaderModule,
        binding_number: u32,
        set_number: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectDescriptorBinding;
}
extern "C" {
    #[doc = " @fn spvReflectGetEntryPointDescriptorBinding"]
    #[doc = "@brief  Get the descriptor binding with the given binding number and set"]
    #[doc = "number that is used in the static call tree of a certain entry"]
    #[doc = "point."]
    #[doc = "@param  p_module        Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  entry_point     The entry point to get the binding from."]
    #[doc = "@param  binding_number  The \"binding\" value of the requested descriptor"]
    #[doc = "binding."]
    #[doc = "@param  set_number      The \"set\" value of the requested descriptor binding."]
    #[doc = "@param  p_result        If successful, SPV_REFLECT_RESULT_SUCCESS will be"]
    #[doc = "written to *p_result. Otherwise, a error code"]
    #[doc = "indicating the cause of the failure will be stored"]
    #[doc = "here."]
    #[doc = "@return                 If the entry point contains a descriptor binding that"]
    #[doc = "matches the provided [binding_number, set_number]"]
    #[doc = "values, a pointer to that binding is returned. The"]
    #[doc = "caller must not free this pointer."]
    #[doc = "If no match can be found, or if an unrelated error"]
    #[doc = "occurs, the return value will be NULL. Detailed"]
    #[doc = "error results are written to *pResult."]
    #[doc = "@note                    If the entry point contains multiple desriptor bindings"]
    #[doc = "with the same set and binding numbers, there are"]
    #[doc = "no guarantees about which binding will be returned."]
    pub fn spvReflectGetEntryPointDescriptorBinding(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        binding_number: u32,
        set_number: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectDescriptorBinding;
}
extern "C" {
    #[doc = " @fn spvReflectGetDescriptorSet"]
    #[doc = ""]
    #[doc = "@param  p_module    Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  set_number  The \"set\" value of the requested descriptor set."]
    #[doc = "@param  p_result    If successful, SPV_REFLECT_RESULT_SUCCESS will be"]
    #[doc = "written to *p_result. Otherwise, a error code"]
    #[doc = "indicating the cause of the failure will be stored"]
    #[doc = "here."]
    #[doc = "@return             If the module contains a descriptor set with the"]
    #[doc = "provided set_number, a pointer to that set is"]
    #[doc = "returned. The caller must not free this pointer."]
    #[doc = "If no match can be found, or if an unrelated error"]
    #[doc = "occurs, the return value will be NULL. Detailed"]
    #[doc = "error results are written to *pResult."]
    pub fn spvReflectGetDescriptorSet(
        p_module: *const SpvReflectShaderModule,
        set_number: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectDescriptorSet;
}
extern "C" {
    #[doc = " @fn spvReflectGetEntryPointDescriptorSet"]
    #[doc = ""]
    #[doc = "@param  p_module    Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  entry_point The entry point to get the descriptor set from."]
    #[doc = "@param  set_number  The \"set\" value of the requested descriptor set."]
    #[doc = "@param  p_result    If successful, SPV_REFLECT_RESULT_SUCCESS will be"]
    #[doc = "written to *p_result. Otherwise, a error code"]
    #[doc = "indicating the cause of the failure will be stored"]
    #[doc = "here."]
    #[doc = "@return             If the entry point contains a descriptor set with the"]
    #[doc = "provided set_number, a pointer to that set is"]
    #[doc = "returned. The caller must not free this pointer."]
    #[doc = "If no match can be found, or if an unrelated error"]
    #[doc = "occurs, the return value will be NULL. Detailed"]
    #[doc = "error results are written to *pResult."]
    pub fn spvReflectGetEntryPointDescriptorSet(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        set_number: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectDescriptorSet;
}
extern "C" {
    pub fn spvReflectGetInputVariableByLocation(
        p_module: *const SpvReflectShaderModule,
        location: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetInputVariable(
        p_module: *const SpvReflectShaderModule,
        location: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetEntryPointInputVariableByLocation(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        location: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetInputVariableBySemantic(
        p_module: *const SpvReflectShaderModule,
        semantic: *const ::std::os::raw::c_char,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetEntryPointInputVariableBySemantic(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        semantic: *const ::std::os::raw::c_char,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetOutputVariableByLocation(
        p_module: *const SpvReflectShaderModule,
        location: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetOutputVariable(
        p_module: *const SpvReflectShaderModule,
        location: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetEntryPointOutputVariableByLocation(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        location: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetOutputVariableBySemantic(
        p_module: *const SpvReflectShaderModule,
        semantic: *const ::std::os::raw::c_char,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    pub fn spvReflectGetEntryPointOutputVariableBySemantic(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        semantic: *const ::std::os::raw::c_char,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectInterfaceVariable;
}
extern "C" {
    #[doc = " @fn spvReflectGetPushConstantBlock"]
    #[doc = ""]
    #[doc = "@param  p_module  Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  index     The index of the desired block within the module\'s"]
    #[doc = "array of push constant blocks."]
    #[doc = "@param  p_result  If successful, SPV_REFLECT_RESULT_SUCCESS will be"]
    #[doc = "written to *p_result. Otherwise, a error code"]
    #[doc = "indicating the cause of the failure will be stored"]
    #[doc = "here."]
    #[doc = "@return           If the provided index is within range, a pointer to"]
    #[doc = "the corresponding push constant block is returned."]
    #[doc = "The caller must not free this pointer."]
    #[doc = "If no match can be found, or if an unrelated error"]
    #[doc = "occurs, the return value will be NULL. Detailed"]
    #[doc = "error results are written to *pResult."]
    pub fn spvReflectGetPushConstantBlock(
        p_module: *const SpvReflectShaderModule,
        index: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectBlockVariable;
}
extern "C" {
    pub fn spvReflectGetPushConstant(
        p_module: *const SpvReflectShaderModule,
        index: u32,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectBlockVariable;
}
extern "C" {
    #[doc = " @fn spvReflectGetEntryPointPushConstantBlock"]
    #[doc = "@brief  Get the push constant block corresponding to the given entry point."]
    #[doc = "As by the Vulkan specification there can be no more than one push"]
    #[doc = "constant block used by a given entry point, so if there is one it will"]
    #[doc = "be returned, otherwise NULL will be returned."]
    #[doc = "@param  p_module     Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  entry_point  The entry point to get the push constant block from."]
    #[doc = "@param  p_result     If successful, SPV_REFLECT_RESULT_SUCCESS will be"]
    #[doc = "written to *p_result. Otherwise, a error code"]
    #[doc = "indicating the cause of the failure will be stored"]
    #[doc = "here."]
    #[doc = "@return              If the provided index is within range, a pointer to"]
    #[doc = "the corresponding push constant block is returned."]
    #[doc = "The caller must not free this pointer."]
    #[doc = "If no match can be found, or if an unrelated error"]
    #[doc = "occurs, the return value will be NULL. Detailed"]
    #[doc = "error results are written to *pResult."]
    pub fn spvReflectGetEntryPointPushConstantBlock(
        p_module: *const SpvReflectShaderModule,
        entry_point: *const ::std::os::raw::c_char,
        p_result: *mut SpvReflectResult,
    ) -> *const SpvReflectBlockVariable;
}
extern "C" {
    #[doc = " @fn spvReflectChangeDescriptorBindingNumbers"]
    #[doc = "@brief  Assign new set and/or binding numbers to a descriptor binding."]
    #[doc = "In addition to updating the reflection data, this function modifies"]
    #[doc = "the underlying SPIR-V bytecode. The updated code can be retrieved"]
    #[doc = "with spvReflectGetCode().  If the binding is used in multiple"]
    #[doc = "entry points within the module, it will be changed in all of them."]
    #[doc = "@param  p_module            Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_binding           Pointer to the descriptor binding to modify."]
    #[doc = "@param  new_binding_number  The new binding number to assign to the"]
    #[doc = "provided descriptor binding."]
    #[doc = "To leave the binding number unchanged, pass"]
    #[doc = "SPV_REFLECT_BINDING_NUMBER_DONT_CHANGE."]
    #[doc = "@param  new_set_number      The new set number to assign to the"]
    #[doc = "provided descriptor binding. Successfully changing"]
    #[doc = "a descriptor binding\'s set number invalidates all"]
    #[doc = "existing SpvReflectDescriptorBinding and"]
    #[doc = "SpvReflectDescriptorSet pointers from this module."]
    #[doc = "To leave the set number unchanged, pass"]
    #[doc = "SPV_REFLECT_SET_NUMBER_DONT_CHANGE."]
    #[doc = "@return                     If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of"]
    #[doc = "the failure."]
    pub fn spvReflectChangeDescriptorBindingNumbers(
        p_module: *mut SpvReflectShaderModule,
        p_binding: *const SpvReflectDescriptorBinding,
        new_binding_number: u32,
        new_set_number: u32,
    ) -> SpvReflectResult;
}
extern "C" {
    pub fn spvReflectChangeDescriptorBindingNumber(
        p_module: *mut SpvReflectShaderModule,
        p_descriptor_binding: *const SpvReflectDescriptorBinding,
        new_binding_number: u32,
        optional_new_set_number: u32,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectChangeDescriptorSetNumber"]
    #[doc = "@brief  Assign a new set number to an entire descriptor set (including"]
    #[doc = "all descriptor bindings in that set)."]
    #[doc = "In addition to updating the reflection data, this function modifies"]
    #[doc = "the underlying SPIR-V bytecode. The updated code can be retrieved"]
    #[doc = "with spvReflectGetCode().  If the descriptor set is used in"]
    #[doc = "multiple entry points within the module, it will be modified in all"]
    #[doc = "of them."]
    #[doc = "@param  p_module        Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_set           Pointer to the descriptor binding to modify."]
    #[doc = "@param  new_set_number  The new set number to assign to the"]
    #[doc = "provided descriptor set, and all its descriptor"]
    #[doc = "bindings. Successfully changing a descriptor"]
    #[doc = "binding\'s set number invalidates all existing"]
    #[doc = "SpvReflectDescriptorBinding and"]
    #[doc = "SpvReflectDescriptorSet pointers from this module."]
    #[doc = "To leave the set number unchanged, pass"]
    #[doc = "SPV_REFLECT_SET_NUMBER_DONT_CHANGE."]
    #[doc = "@return                 If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of"]
    #[doc = "the failure."]
    pub fn spvReflectChangeDescriptorSetNumber(
        p_module: *mut SpvReflectShaderModule,
        p_set: *const SpvReflectDescriptorSet,
        new_set_number: u32,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectChangeInputVariableLocation"]
    #[doc = "@brief  Assign a new location to an input interface variable."]
    #[doc = "In addition to updating the reflection data, this function modifies"]
    #[doc = "the underlying SPIR-V bytecode. The updated code can be retrieved"]
    #[doc = "with spvReflectGetCode()."]
    #[doc = "It is the caller\'s responsibility to avoid assigning the same"]
    #[doc = "location to multiple input variables.  If the input variable is used"]
    #[doc = "by multiple entry points in the module, it will be changed in all of"]
    #[doc = "them."]
    #[doc = "@param  p_module          Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_input_variable  Pointer to the input variable to update."]
    #[doc = "@param  new_location      The new location to assign to p_input_variable."]
    #[doc = "@return                   If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of"]
    #[doc = "the failure."]
    pub fn spvReflectChangeInputVariableLocation(
        p_module: *mut SpvReflectShaderModule,
        p_input_variable: *const SpvReflectInterfaceVariable,
        new_location: u32,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectChangeOutputVariableLocation"]
    #[doc = "@brief  Assign a new location to an output interface variable."]
    #[doc = "In addition to updating the reflection data, this function modifies"]
    #[doc = "the underlying SPIR-V bytecode. The updated code can be retrieved"]
    #[doc = "with spvReflectGetCode()."]
    #[doc = "It is the caller\'s responsibility to avoid assigning the same"]
    #[doc = "location to multiple output variables.  If the output variable is used"]
    #[doc = "by multiple entry points in the module, it will be changed in all of"]
    #[doc = "them."]
    #[doc = "@param  p_module          Pointer to an instance of SpvReflectShaderModule."]
    #[doc = "@param  p_output_variable  Pointer to the output variable to update."]
    #[doc = "@param  new_location      The new location to assign to p_output_variable."]
    #[doc = "@return                   If successful, returns SPV_REFLECT_RESULT_SUCCESS."]
    #[doc = "Otherwise, the error code indicates the cause of"]
    #[doc = "the failure."]
    pub fn spvReflectChangeOutputVariableLocation(
        p_module: *mut SpvReflectShaderModule,
        p_output_variable: *const SpvReflectInterfaceVariable,
        new_location: u32,
    ) -> SpvReflectResult;
}
extern "C" {
    #[doc = " @fn spvReflectSourceLanguage"]
    #[doc = ""]
    #[doc = "@param  source_lang  The source language code."]
    #[doc = "@return Returns string of source language specified in \\a source_lang."]
    #[doc = "The caller must not free the memory associated with this string."]
    pub fn spvReflectSourceLanguage(
        source_lang: SpvSourceLanguage,
    ) -> *const ::std::os::raw::c_char;
}
